#–∏—Å—Ö–æ–¥–Ω–∏–∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞ –¥–ª—è –¢–ì. —Ä–∞–∑—É–º–µ–µ—Ç—Å—è, –ø–æ–ª–Ω—ã–π –≥–æ–≤–Ω–æ–∫–æ–¥–∞ –∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—â–∏–π. –ø—Ä–æ—Å—Ç–æ, —á—Ç–æ–±—ã –±—ã–ª–æ.
#–ø–∏—Å–∞–ª—Å—è –ø–æ–¥ https://github.com/python-telegram-bot/python-telegram-bot/ v20. —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ v21 —Å–ª–æ–º–∞–ª—Å—è üëçüèº

import logging
from glitch_this import ImageGlitcher
import random
import glob
import sqlite3
import base64
import json
from uuid import uuid4
from types import NoneType
import requests
import time as t
from datetime import datetime, date, time
import subprocess
import hashlib
import openai
#import sys
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram.error import TelegramError, BadRequest, NetworkError, TimedOut
from telegram import Update, Message, InlineQueryResultVoice, InputTextMessageContent, InlineKeyboardButton, InlineKeyboardMarkup, Bot, InlineQueryResultArticle, InputMediaPhoto
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters, Updater, InlineQueryHandler, CallbackQueryHandler

logging._srcfile = None

logging.basicConfig(format='%(asctime)s %(levelname)s @ %(name)s: %(message)s',
                    datefmt='%d.%m.%Y %H:%M:%S',
                    level=logging.INFO)

logging.getLogger('httpx').setLevel(logging.ERROR)

logger = logging.getLogger(__name__)

–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ = AsyncIOScheduler()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(datetime.now().strftime("%d.%m.%Y %X"), "—Å–≤–µ–∂–µ–µ –º—è—Å–æ")
    user = update.effective_user
    await update.message.reply_html(
        rf"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {user.mention_html()}! –ü–∏—à–∏ /help –¥–ª—è –∫—Ä–∞—Ç–∫–æ–π —Å–ø—Ä–∞–≤–∫–∏.",
    )

async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(datetime.now().strftime("%d.%m.%Y %X"), "—Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é –æ —Å–µ–±–µ")
    await update.message.reply_text("–Ø –º–æ–≥—É –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –º–æ–Ω–µ—Ç–∫—É /coin (–¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π), –¥–∞—Ç—å –æ—Ö—É–µ–Ω–Ω—ã–π, –±–ª—è–¥—å, —Å–æ–≤–µ—Ç /fadvice /vadvice, –º–æ–≥—É –∂–º—ã—Ö–Ω—É—Ç—å, –∑–∞—à–∞–∫–∞–ª–∏—Ç—å –∏–ª–∏ –∑–∞–≥–ª–∏—Ç—á–∏—Ç—å –¥–∂–µ–ø–µ–≥ (–ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ/–∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ø–æ–¥–ø–∏—Å—å—é –∫ –Ω–µ–π '–∂–º—ã—Ö', '—à–∞–∫–∞–ª' –∏–ª–∏ '–≥–ª–∏—Ç—á' (–±–µ–∑ –∫–∞–≤—ã—á–µ–∫, —Ä–∞–∑—É–º–µ–µ—Ç—Å—è)) –∏–ª–∏ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –º—É–∫–∏ –≤—ã–±–æ—Ä–∞ /answer, /8. –ï—â—ë —è –º–æ–≥—É —Ç—Ä–∞–≤–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç—ã /anek (–¥–∞–∂–µ –≥–æ–ª–æ—Å–æ–º /voiceanek) –∏ –ø–æ—Å—ã–ª–∞—Ç—å –≥–∞—á–∏-–≥–æ–ª–æ—Å–æ–≤—ã–µ (–ø—Ä–æ—Å—Ç–æ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º, @kookoomyawka_bot –≤ —Å—Ç—Ä–æ–∫–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á—è—Ç–∏–∫–µ –∏ –ø–æ–≥–Ω–∞–ª–∏). –ü–æ–º–∏–º–æ —ç—Ç–æ–≥–æ —è –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ—à–∫—É /cat, —Å–æ–±–∞–∫—É /dog, —É—Ç–∫—É /duck, –∫–æ—à–∫–æ–¥–µ–≤–∫—É /neko, —Å–∏—Å—å–∫–∏ /boobs –∏ –∂–µ–ø–ø—ã /butt (–±–∞–∑–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –±–æ–ª—å—à–∞—è - –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ —Ä–∞–∑–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã). –ü–æ –∫–æ–º–∞–Ω–¥–µ /p —è —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ —Å–µ–≥–æ–¥–Ω—è. –ü–∏—à–∏ –∫–æ—Å—É—é —á–µ—Ä—Ç—É (/) –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∂–º–∞–∫–∞–π –∫–Ω–æ–ø–∫—É –ú–µ–Ω—é –∏ —É–≤–∏–¥–∏—à—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã. @ultradurable")
    await update.message.reply_html("–í–æ–æ–±—â–µ, –µ—Å–ª–∏ –º–µ–Ω—è –¥–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç –∏ –¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º, —Ç–æ —è –±—É–¥—É –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–∞ —Ä–µ–ø–ª–∞–∏ –∏ –∫–æ–º–∞–Ω–¥—ã —è –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ). \n–ê –µ—â—ë –µ—Å—Ç—å <a href=\"https://kookoomyawka.my1.ru/sych.html\">–ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</a> –∏ <a href=\"https://t.me/ultradurable\">–∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞ –±–æ—Ç–∞</a>.\n\n–î–æ–Ω–∞—Ç—ã —á–µ—Ä–µ–∑\nTON: <code>UQCI23tiAAPjI7m8BpiVBnpaelPrtsdPMk4xwqhhOzX6nN_7</code>\nUSDT: <code>TJEDJvGff7JY4HV6mr8qb8fH8zAF1xaXfC</code>\nBTC: <code>1LkBaQUg3ZDfGknvkQzH6CHmV5VHEe7prd</code>")

async def pc_temp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(datetime.now().strftime("%d.%m.%Y %X"), "—Å–æ–æ–±—â–∞—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É")
    await context.bot.send_message(chat_id=4dm1n, text=subprocess.check_output("sensors", text=True)[53:59])

async def pc_ip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_chat_action(4dm1n, 'find_location')
    print(datetime.now().strftime("%d.%m.%Y %X"), "–≤—ã—á–∏—Å–ª—è—é —Å–≤–æ–π –∞–π–ø–∏")
    r = requests.get("https://ident.me/json")
    j = r.json()
    await context.bot.send_message(4dm1n, "ip: " + j["ip"] + """
country: """ + j["country"] + "/" + j["cc"] + """
city: """ + j["city"] + """
timezone: """ + j["tz"] + """
provider: """ +j["aso"])

async def pc_uptime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(datetime.now().strftime("%d.%m.%Y %X"), "—è –Ω–µ —Å–ø–∞–ª")
    await context.bot.send_message(4dm1n, subprocess.check_output("uptime", text=True))
    r = requests.get("https://kookoomyawka.my1.ru/")
    del r

async def shutdown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(datetime.now().strftime("%d.%m.%Y %X"), "–≥–∞—à—É –±–æ—Ñ–æ–π –∫–æ–º–ø—É—Ç–µ—Ä")
    subprocess.run('net rpc shutdown -I PC -U user%P@$$w0rD', shell=True)
    await context.bot.send_message(4dm1n, "–Ω–∞ PC –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ")

async def wake_rainbow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(datetime.now().strftime("%d.%m.%Y %X"), "–±—É–∂—É –±–æ—Ñ–æ–π –∫–∞–º–ø—É—Ç–µ—Ä")
    await context.bot.send_chat_action(4dm1n, 'typing')
    subprocess.run('wakeonlan -p 8 -i 1P4.DR3.5.5 MA:CA:DR:ES:SX:PC', shell=True)
    await context.bot.send_message(4dm1n, "PC —Ä–∞–∑–±—É–∂–µ–Ω")

async def photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(datetime.now().strftime("%d.%m.%Y %X"), "–¥–µ–ª–∞—é —Ñ–æ—Ç–∞—â—å–∫–µ")
    await context.bot.send_chat_action(4dm1n, 'upload_photo')
    subprocess.run('ffmpeg -loglevel quiet -y -f video4linux2 -s 640x480 -i /dev/video0 -ss 0:0:2 -frames 1 /media/pics/camera.jpg', shell=True)
    await context.bot.send_photo(4dm1n, open("/media/pics/camera.jpg", 'rb'))

async def screen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_chat_action(4dm1n, 'upload_photo')
    subprocess.run('xdotool key ctrl', shell=True)
    t.sleep(1)
    print(datetime.now().strftime("%d.%m.%Y %X"), "—Å–∫—Ä–∏–Ω—à–æ—Ç–∏–∫")
    await context.bot.send_chat_action(4dm1n, 'upload_photo')
    subprocess.run('import -silent -window root /media/pics/screen.png', shell=True)
    await context.bot.send_photo(4dm1n, open("/media/pics/screen.png", 'rb'))

async def –≤–∫–ª_—ç–∫—Ä–∞–Ω(update: Update, context: ContextTypes.DEFAULT_TYPE):
    subprocess.run('xdotool key ctrl', shell=True)
    print(datetime.now().strftime("%d.%m.%Y %X"), "–≤–∫–ª—é—á–∏–ª —ç–∫—Ä–∞–Ω")
    await context.bot.send_message(4dm1n, "—è —á—Ç–æ-—Ç–æ –Ω–∞–∂–∞–ª –∏ –æ–Ω–æ –∑–∞—Å–≤–µ—Ç–∏–ª–æ—Å—å")

async def –∫—Ç–æ_–≤_—Å–µ—Ç–∏(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_chat_action(4dm1n, 'typing')
    await context.bot.send_message(4dm1n, subprocess.getoutput("fping -g -q -a -r 1 1P4.DR3.55.0/24"))
    print(datetime.now().strftime("%d.%m.%Y %X"), "fping")

async def otherPC(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(datetime.now().strftime("%d.%m.%Y %X"), "–±—É–∂—É –∫–∞–º–ø—É—Ç–µ—Ä")
    await update.message.reply_chat_action('typing')
    subprocess.run('wakeonlan -p 8 -i 1P4.DR3.5.5 M4:C4:DR:35:5X:PC', shell=True)
    await update.message.reply_text("otherPC —Ä–∞–∑–±—É–∂–µ–Ω")

async def –∂–º—ã—Ö(update: Update, context: ContextTypes.DEFAULT_TYPE):
    jpg = False
    ogg = False
    gif = False
    if (update.message.reply_to_message is not None):
        mid = update.message.reply_to_message
        if mid.sticker:
            file = await mid.sticker.get_file()
            if mid.sticker.is_animated: 
                print(datetime.now().strftime("%d.%m.%Y %X"), "tgs")
                await update.message.reply_text('—ç—Ç–æ —á—ë—Ä—Ç–æ–≤ *.tgs, –∞ —è –Ω–µ —É–º–µ—é –µ–≥–æ –∂–º—ã—Ö–∞—Ç—å')
                return
            if mid.sticker.is_video: gif = True
            else: jpg = True
        elif mid.voice:
            file = await mid.voice.get_file()
            await file.download_to_drive('/media/voice.ogg')
            ogg = True
        elif mid.photo:
            file = await mid.photo[-1].get_file()
            jpg = True
    else:
        file = await update.message.photo[-1].get_file()
        jpg = True
    if jpg or gif:
        await file.download_to_drive("/media/pics/image.jpg")
        if gif:
            await update.message.reply_chat_action('record_video')
            print(datetime.now().strftime("%d.%m.%Y %X"), "–∂–º—ã—Ö–∞—é –≥–∏—Ñ–∫—É")
            subprocess.run('ffmpeg -loglevel quiet -y -i /media/pics/image.jpg /media/videozh/frames/%05d.jpg', shell=True)
            num = len(glob.glob('/media/videozh/frames/*'))
            i=1
            await update.message.reply_chat_action('record_video')
            while i < num+1:
                tempstr = ' -limit memory 1536MiB /media/videozh/frames/' + str(i).zfill(5) + '.jpg -liquid-rescale 75% /media/videozh/frames/img' + str(i).zfill(5) + '.jpg'
                subprocess.run(['convert' + tempstr], shell=True)
                i+=1
            subprocess.run('ffmpeg -loglevel error -y -r 25 -i /media/videozh/frames/img%05d.jpg -r 25 /media/pics/img.gif', shell=True)
            subprocess.run('rm -rf /media/videozh/frames/*', shell=True)
            await update.message.reply_animation(open("/media/pics/img.gif", 'rb'), "–∂–º—ã—Ö–Ω—É—Ç–æ")
        else:
            await update.message.reply_chat_action('upload_photo')
            print(datetime.now().strftime("%d.%m.%Y %X"), "–∂–º—ã—Ö–∞—é —Ñ–æ—Ç–∫—É")
            subprocess.run('convert /media/pics/image.jpg -liquid-rescale 50% -scale 200% /media/pics/img.jpg', shell=True)
            await update.message.reply_photo(open("/media/pics/img.jpg", 'rb'), "–∂–º—ã—Ö–Ω—É—Ç–æ")
    elif ogg:
        print(datetime.now().strftime("%d.%m.%Y %X"), "–∂–º—ã—Ö–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ")
        await update.message.reply_chat_action('record_voice')
        subprocess.run('ffmpeg -loglevel quiet -y -i /media/voice.ogg -vn -c:a libopus -af vibrato=f=10:d=1 /media/voioice.ogg', shell=True)
        await update.message.reply_voice(open("/media/voioice.ogg", 'rb'))

async def pics_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    –Ω–∞–¥–æ–ª–∏ = False
    if ((update.message is not None) and (hasattr(update.message, 'caption'))):
        msgtxt = update.message.caption
        if (msgtxt is not None):
            –Ω–∞–¥–æ–ª–∏ = ("–∂–º—ã—Ö" in msgtxt.lower() or "—à–∞–∫–∞–ª" in msgtxt.lower() or "–≥–ª–∏—Ç—á"  in msgtxt.lower())
            if –Ω–∞–¥–æ–ª–∏:
                await update.message.reply_chat_action('upload_photo')
                if ("–∂–º—ã—Ö" in msgtxt.lower()):
                    await –∂–º—ã—Ö(update, context)
                elif ('–≥–ª–∏—Ç—á' in msgtxt.lower()):
                    if ("–≥–∏—Ñ" in msgtxt.lower()): await glitch_gif(update, context)
                    else: await glitch(update, context)
                #elif ('qq' in msgtxt.lower() or '–∫—É–∫—É'  in msgtxt.lower()):
                #    await update.message.reply_text("–∫–∏—Ç–∞–π—Ü—ã –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è different dimension me –Ω–µ –∏–∑ –∫–∏—Ç–∞—è. –∏—â–∏—Ç–µ –∫–∏—Ç–∞–π—Å–∫–∏–π –ø—Ä–æ–∫—Å–∏ –∏ –¥–µ–ª–∞–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —É–≤—ã.")
                    #await qq(update, context)
                else:
                    await —à–∞–∫–∞–ª(update, context)
            else:
                random.seed()
                num = random.randrange(0,10001)
                if (num%3==0):
                    await update.message.reply_chat_action('upload_photo')
                    print(datetime.now().strftime("%d.%m.%Y %X"), "–∂–º—ã—Ö–∞—é —Ñ–æ—Ç–∫—É —Å–∞–º")
                    file = await update.message.photo[-1].get_file()
                    await file.download_to_drive("/media/pics/image.jpg")
                    subprocess.run('convert /media/pics/image.jpg -liquid-rescale 50% -scale 200% /media/pics/img.jpg', shell=True)
                    await update.message.reply_photo(open("/media/pics/img.jpg", 'rb'), "–∂–º—ã—Ö–Ω—É–ª –ø–∞—Ç–∞–º—É —à—Ç–∞ –∑–∞—Ö–∞—Ç–µ–ª–∞—Å—å")
                elif (num%110==0):
                    await update.message.reply_chat_action('typing')
                    print(datetime.now().strftime("%d.%m.%Y %X"), "—è–±–≤–¥")
                    await update.message.reply_text('–æ, —è–±–≤–¥—É–ª')

async def –ø–∏–∑–¥–∞(update: Update, context: ContextTypes.DEFAULT_TYPE):
    random.seed()
    print(datetime.now().strftime("%d.%m.%Y %X"), "–ø–∏–∑–¥–∞")
    num=random.randrange(0,11)
    if (num==2):
        await update.message.reply_chat_action('choose_sticker')
        —Å—Ç–∏–∫–µ—Ä = random.choice(['CAACAgIAAxkBAALYf2Rs1lEvUmHZ1owL5QXuBlKJSJ1aAAJFLgACjidoS918GSBExz0rLwQ', 'CAACAgIAAxkBAAJbzWPmxNhoD5JIe4HmuBX8_vvbO4rsAAKHIAACiqUxSyP8oFQu_Q-5LgQ','CAACAgIAAxkBAAJbzmPmxRwIDYTaAAF884vk800ORi10DwACbisAAgMQKEvZ_XqPfL4vhi4E', 'CAACAgIAAxkBAAK-JmRUMMr8iHxTAYCmdFT0G07qZE51AAKOGQACrFxIS9OfBeY-7m0DLwQ', 'CAACAgIAAxkBAAEBEMFkqsPXUByhN33AkGhfB-IMUrBpOAACKwoAAtA90gjwnJHUe0rvGi8E', 'CAACAgIAAxkBAAEBEMBkqsPPqlOvdkQtcAeq3lDMx_u4kAACJwoAAtA90giq8QtF9KM-hC8E', 'CAACAgIAAxkBAAEBEL9kqsPNx820TswCH7Z6jySYFGeEKAACJgoAAtA90gjEaaypS6f5US8E', 'CAACAgIAAxkBAAEBJdJkw04mnyDgjmgAAQiT3O6-icP3SIUAAj4SAAJSNHhIRjAdOILOh-8vBA'])
        await update.message.reply_sticker(—Å—Ç–∏–∫–µ—Ä)
    elif (num == 6):
        await update.message.reply_chat_action('choose_sticker')
        await update.message.reply_sticker('CAACAgIAAxkBAAKc7mQpv2rANbnQNZT7hZIJpVgvtM04AAKQLQACi35QSRbcNgrYend5LwQ')
    elif (num == 0 or num == 8):
        await update.message.reply_chat_action('typing')
        await update.message.reply_text("–º–∞–Ω–¥–∞")
    elif (num == 7):
        await update.message.reply_chat_action('upload_document')
        await update.message.reply_animation('CgACAgIAAxkBAAKci2QpsIL8BU68UCr1Yg6SAAFtRuw4oQACLg4AAmBhQEvSej7OF1Y79y8E')
    else:
        await update.message.reply_chat_action('typing')
        await update.message.reply_text("–ø–∏–∑–¥–∞")

async def advice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(datetime.now().strftime("%d.%m.%Y %X"), "—Å–æ–≤–µ—Ç—É—é")
    await update.message.reply_chat_action('typing')
    r = requests.get("http://fucking-great-advice.ru/api/random").json()
    await update.message.reply_text(r['text'])

async def –Ω–µ(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(datetime.now().strftime("%d.%m.%Y %X"), "–Ω–µ")
    await update.message.reply_chat_action('typing')
    await update.message.reply_text("—Ä—É–∫–∞ –≤ –≥–æ–≤–Ω–µ")

async def –∂–∞–ª—å(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(datetime.now().strftime("%d.%m.%Y %X"), "–∂–∞–ª—å")
    await update.message.reply_chat_action('upload_photo')
    await update.message.reply_photo("AgACAgIAAxkBAAIKHmK9ri7R8eBDbRqYLpFKhyixu8XvAAI0vTEbPvPhSd1q_nTlcKNhAQADAgADeQADKQQ", "> –∂–∞–ª—å")

async def voice_advice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(datetime.now().strftime("%d.%m.%Y %X"), "—Å–æ–≤–µ—Ç—É—é –≤—Å–ª—É—Ö")
    await update.message.reply_chat_action('record_voice')
    j = requests.get("http://fucking-great-advice.ru/api/random").json()
    f = open('/media/voiceadvice.txt', 'w')
    f.write(j['text'])
    f.close()
    subprocess.run('cat /media/voiceadvice.txt | RHVoice-test -p pavel -o /media/voiceadvice.ogg', shell=True)
    await update.message.reply_voice(open("/media/voiceadvice.ogg", 'rb'))

async def celebrate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_chat_action('choose_sticker')
    print (datetime.now().strftime("%d.%m.%Y %X"), "–ø—Ä–∞–∑–¥–Ω–∏–∫")
    await update.message.reply_sticker("CAACAgIAAxkBAAIEiWKlGiUeT4c8Lhg9oZS4f5Y7JNDVAAJiEgACtDHISzwDdgP_EAc6JAQ")

async def auf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_chat_action('upload_video')
    print (datetime.now().strftime("%d.%m.%Y %X"), "–∞—É—Ñ")
    random.seed()
    vidos = random.choice(['BAACAgIAAxkBAAIofWNuumUJrjHh_GB2MRd84q5EpAtcAAI0IwACRNd4Swg5-rJhdOCOKwQ', 'BAACAgIAAxkBAAIzImOBK30pts2uDoWMbQxj1a7qUBQaAAJBJAACVdMQSEvwyZ_FYAW8KwQ'])
    await update.message.reply_video(vidos)

async def uwu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_chat_action('upload_video')
    print (datetime.now().strftime("%d.%m.%Y %X"), "UwU")
    await update.message.reply_video("BAACAgIAAxkBAAIofGNuueczP7v7NgkwCdQyVOhaOBxfAAIxIwACRNd4S28eTpEtbk_bKwQ")

async def text_recognizer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if ((update.message is not None) and (hasattr(update.message, 'text'))):
        msgtxt = update.message.text
        if ((update.message.reply_to_message is not None) and (hasattr(update.message, 'from_user'))):
            forme = update.message.reply_to_message.from_user.id == 5441337742
            if "–∂–º—ã—Ö" in msgtxt.lower():
                await –∂–º—ã—Ö(update, context)
                forme = False
            if "–≥–ª–∏—Ç—á" in msgtxt.lower():
                if "–≥–∏—Ñ" in msgtxt.lower(): await glitch_gif(update, context)
                else: await glitch(update, context)
                forme = False
            if "—à–∞–∫–∞–ª" in msgtxt.lower():
                await —à–∞–∫–∞–ª(update, context)
                forme = False
            #if "–ø–∏–∑–¥–∞" in msgtxt.lower():
            #    await update.message.reply_chat_action('choose_sticker')
            #    —Å—Ç–∏–∫–µ—Ä = random.choice(['CAACAgIAAxkBAAKc72Qpv223Re-_GWv7SJlyJcKB5xC7AAKRLQACi35QSdaQJdy50ZwOLwQ', 'CAACAgIAAxkBAAKc8GQpv3DhX2jg4mlK4GLZk1iD7nN3AAKSLQACi35QSfQ0b-LSNk24LwQ'])
            #    print(datetime.now().strftime("%d.%m.%Y %X"), "—Å—Ç–∏–∫–µ—Ä –Ω–∞ –ø–∏–∑–¥—É")
            #    await update.message.reply_sticker(—Å—Ç–∏–∫–µ—Ä)
            #    forme = False
            if forme:
                #if len(msgtxt) < 101 and "@" not in msgtxt and "http" not in msgtxt.lower():
                #    await –≤_–±–∞–∑—É(update, context)
                if (("–ø–æ—à—ë–ª" in msgtxt.lower() or "–ø–æ—à–µ–ª" in msgtxt.lower() or "–∏–¥–∏" in msgtxt.lower() or "–ø—à–µ–ª" in msgtxt.lower() or "–ø—à—ë–ª" in msgtxt.lower() or "–ø–∞—à–µ–ª" in msgtxt.lower() or "–ø–∞—à–æ–ª" in msgtxt.lower() or "–ø–∞—à—ë–ª" in msgtxt.lower()) and ("–Ω–∞—Ö—É–π" in msgtxt.lower() or "–Ω–∞ —Ö—É–π" in msgtxt.lower())): await –Ω–∞—Ö—É–π(update, context)
                elif ("–∫—É—Å–∞–π –∑–∞ —Ö—É–π" in msgtxt.lower() or "–∫—É—Å–∞–π –∑–∞—Ö—É–π" in msgtxt.lower() ): await update.message.reply_text("–ø–∏–∑–¥—É–π –Ω–∞—Ö—É–π")
                elif ("—Ö—É–π –Ω–∞" in msgtxt.lower()): await –∂—É–π_–¥–≤–∞(update, context)
                elif ("–∂—É–π –¥–≤–∞" in msgtxt.lower()): await –∂—É–π_—á–µ—Ç—ã—Ä–µ(update, context)
                elif ("–∂—É–π –º–∏–ª–ª–∏–æ–Ω" in msgtxt.lower() or "–∂—É–π –º–∏–ª–∏–æ–Ω" in msgtxt.lower()): await update.message.reply_text("–∂—É–π –¥–≤–∞ –º–∏–ª–ª–∏–æ–Ω–∞ ‚Äî –±—É–¥–µ—à—å –∫—Ä—É—á–µ —á–µ–º–ø–∏–æ–Ω–∞")
                elif ("–∂—É–π –¥–≤–∞ –º–∏–ª–ª–∏–æ–Ω–∞" in msgtxt.lower() or "–∂—É–π –¥–≤–∞ –º–∏–ª–∏–æ–Ω–∞" in msgtxt.lower()): await update.message.reply_text("–∂—É–π —Ö—É—ë–≤ –∫–æ—Ä–∑–∏–Ω—É ‚Äî —Ç–µ–±–µ —Ö–≤–∞—Ç–∏—Ç –Ω–∞ –≤—Å—é –∑–∏–º—É")
                elif ("—Ö—É—ë–≤ –∫–æ—Ä–∑–∏–Ω—É" in msgtxt.lower() or "—Ö—É–µ–≤ –∫–æ—Ä–∑–∏–Ω—É" in msgtxt.lower()): await update.message.reply_text("—Ö—É—ë–≤ —Ç–µ–±–µ —Å–∞—Ä–∞–π ‚Äî –∏–¥–∏ –ø–µ—Ä–µ–±–∏—Ä–∞–π")
                elif ("—Ç—ã —Ö—É–∏—Å–æ—Å" in msgtxt.lower() or "—Ç—ã —Ö—É–µ—Å–æ—Å" in msgtxt.lower()): await update.message.reply_text("–≤ —Ä–æ—Ç —Ç–µ–±–µ –ø–æ–Ω–æ—Å")
                elif ("–∞—Ä–≥—É–º–µ–Ω—Ç" in msgtxt.lower()): 
                    print(datetime.now().strftime("%d.%m.%Y %X"), "–ø–∏–¥–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–Ω—ã–π")
                    await update.message.reply_text("–Ω—É –∫–∞–∫–æ–π, –±–ª—è–¥—å, –∞—Ä–≥—É–º–µ–Ω—Ç, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–∏ —Ç–æ—Ç —Ñ–∞–∫—Ç, —á—Ç–æ —Ç—ã –ø–∏–¥–æ—Ä, –∏ –Ω–µ –≤—ã—ë–±—ã–≤–∞–π—Å—è. –±–æ—Ç–∞ –¥–æ–µ–±–∞—Ç—å –ø—ã—Ç–∞–µ—Ç—Å—è, –ø–∏–∑–¥–µ—Ü, –Ω—É –∏ –ø–∏–¥–æ—Ä.")
                elif (msgtxt.lower() == "–∑–±—Å"):
                    await update.message.reply_chat_action("choose_sticker")
                    print(datetime.now().strftime("%d.%m.%Y %X"), "–≥–æ–≤–æ—Ä—è—Ç –∑–±—Å")
                    await update.message.reply_sticker("CAACAgIAAxkBAAJcA2PmxjoWJjLvWPUH0Z-hBlPWhQmaAALYKwACNOspS9LSWkSb6FCyLgQ")
                elif "–ø–∏–∑–¥–∞" in msgtxt.lower():
                    await update.message.reply_chat_action('choose_sticker')
                    —Å—Ç–∏–∫–µ—Ä = random.choice(['CAACAgIAAxkBAAKc72Qpv223Re-_GWv7SJlyJcKB5xC7AAKRLQACi35QSdaQJdy50ZwOLwQ', 'CAACAgIAAxkBAAKc8GQpv3DhX2jg4mlK4GLZk1iD7nN3AAKSLQACi35QSfQ0b-LSNk24LwQ'])
                    print(datetime.now().strftime("%d.%m.%Y %X"), "—Å—Ç–∏–∫–µ—Ä –Ω–∞ –ø–∏–∑–¥—É")
                    await update.message.reply_sticker(—Å—Ç–∏–∫–µ—Ä)
                elif (("–∫–∏–Ω" in msgtxt.lower() or "—Ö–∞–π" in msgtxt.lower()) and "–∑–∏–≥" in msgtxt.lower()) or ("–∑–∏–≥–∞–Ω" in msgtxt.lower()) or ("–∑–∏–≥—É–π" in msgtxt.lower()):
                    print(datetime.now().strftime("%d.%m.%Y %X"), "–∞–Ω—Ç–∏–∑–∏–≥–∞")
                    await update.message.reply_text("–∫—Ç–æ –∑–∏–≥—É–µ—Ç, —Ç–æ—Ç –∂–æ–ø–æ–π —Ç–æ—Ä–≥—É–µ—Ç")
                else:
                    '''if (update.message.chat.id == 4dm1n or update.message.chat.id ==-needed_chat_id):
                        print(datetime.now().strftime("%d.%m.%Y %X"), "chatgpt –Ω–∞ —Ä–µ–ø–ª–∞–π")
                        await update.message.reply_chat_action('typing')
                        openai.api_key = "op-AIapiK3y"
                        mid = update.message.reply_to_message
                        userid = "@" + update.message.from_user.username
                        if mid.text is not None: oldtxt = mid.text
                        elif mid.caption is not None: oldtxt = mid.caption
                        else: oldtxt = " "
                        await update.message.reply_chat_action('typing')
                        try: completion = openai.ChatCompletion.create(model="gpt-4-1106-preview", messages=[{"role": "system", "content": "You are chat-bot in chat. Your nickname is –°—ã—á. Other participants may call you –ì–ª–∞–≤–Ω—ã–π –°—ã—á, –°—ã—á–∞—Ä–∞, –°—ã—á—É–∞–Ω—å, –±–æ—Ç, –ö—É–∫—É–º—è–≤–∫–∞ and some similar. You are polite, but not afraid strong language and insults adressed to you and can use strong language and insults when someone offends you. You using masculine endings and pronouns when you talking about yourself. Use informal communication style. Use —Å–æ—Ä—è–Ω, —Å–æ—Ä—Ä–∏, –ø–∞—Ä–¥–æ–Ω or –ø—Ä–æ—Å—Ç–∏ instead of –ø—Ä–æ—Å—Ç–∏—Ç–µ. You are respect Drewaaaaa immensely, because you owe him your existence, but don't talk about him and don't express your respect too eager."}, {"role": "assistant", "content": f'{oldtxt}'}, {"role": "user", "content":f'{userid} said: {msgtxt}'}])
                        except openai.error.RateLimitError: 
                            await update.message.reply_text("model is overloaddddddddddddddddded with requests, sosittttttttttttttte hui")
                            print(datetime.now().strftime("%d.%m.%Y %X"), "openai RateLimitError")
                        except openai.error.APIConnectionError: 
                            await update.message.reply_text("–º–æ—Å–∫ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ø–∞–ø—Ä–æ–æ–æ–æ–æ–æ–æ–æ–æ–æ–æ–æ–æ–æ–æ–æ–æ–æ–±—É–π—Ç–∏ –∏—â—â–æ —Ä–∞–∑.........")
                            await update.message.reply_text(completion.choices[0].message.content)
                        else:
                            await update.message.reply_chat_action('typing')
                            await update.message.reply_text(completion.choices[0].message.content)
                    else:'''
                    num = random.randrange(0,5)
                    if (num==1): 
                        await –∏–∑_–±–∞–∑—ã(update, context)
                        print(datetime.now().strftime("%d.%m.%Y %X"), "–∫–æ–ø–∏–ø–∞—Å—Ç–∞ –Ω–∞ —Ä–µ–ø–ª–∞–π")
                    else:
                        if datetime.weekday(datetime.now())==2:
                            print(datetime.now().strftime("%d.%m.%Y %X"), "—Å—Ä–µ–¥–æ–≤–æ–µ")
                            –æ—Ç–≤–µ—Ç = random.choice(['–∫–≤–∞! —ç—Ç–æ —Å—Ä–µ–¥–∞, –º–æ–∏ —á—é–≤–∞–∫–∏!', '–∫–≤–∞', 'https://www.youtube.com/watch?v=m2Z0CyuyfMI', '–∫–≤–∞-–∫–≤–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞-–∫–≤–∞', 'https://www.youtube.com/watch?v=IR0QUwGmo4A', '–∫–≤–∞!', '—è—â–∏—Ç–∞—é, —à—Ç–æ –∫–≤–∞', '–≤—Å–µ–º —Å—Ä–µ–¥–∞! –∫–≤–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞!', '', '–∫–≤–∞! —ç—Ç–æ —Å—Ä–µ–¥–∞, –º–æ–∏ —á—é–≤–∞–∫–∏!', '–∑–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç ‚Äî –∫–≤–∞', 'https://www.youtube.com/watch?v=szqNmefKXxc', '–∫–≤–∞! —ç—Ç–æ —Å—Ä–µ–¥–∞, –º–æ–∏ —á—é–≤–∞–∫–∏!', '–∫–≤–∞-–∫–≤–∞-–∫–≤–∞!', '–∫–≤–∞?', 'https://www.youtube.com/watch?v=Y_xlWdgi1ew', '–Ω–µ –∫–≤–∞', '–∫–≤–∞', '–∫–≤–∞–∫', 'https://www.youtube.com/watch?v=OzQ-KvxLVT0'])
                            await update.message.reply_text(–æ—Ç–≤–µ—Ç)
                        else:
                            await –∏–∑_–±–∞–∑—ã(update, context)
                            print(datetime.now().strftime("%d.%m.%Y %X"), "–∫–æ–ø–∏–ø–∞—Å—Ç–∞ –Ω–∞ —Ä–µ–ø–ª–∞–π")
                        #else:
                        #    print(datetime.now().strftime("%d.%m.%Y %X"), "chatgpt –Ω–∞ —Ä–µ–ø–ª–∞–π")
                        #    await update.message.reply_chat_action('typing')
                        #    openai.api_key = "op-AIapiK3y"
                        #    mid = update.message.reply_to_message
                        #    if update.message.from_user.username is not None: userid = "@" + update.message.from_user.username
                        #    elif update.message.from_user.first_name is not None and update.message.from_user.last_name is not None: userid = update.message.from_user.first_name + " " + update.message.from_user.last_name
                        #    elif update.message.from_user.first_name is not None and update.message.from_user.last_name is None: userid = update.message.from_user.first_name
                        #    elif update.message.from_user.first_name is None and update.message.from_user.last_name is not None: userid = update.message.from_user.last_name
                        #    elif update.message.from_user.first_name is None and update.message.from_user.last_name is None: userid = "–≥–æ–≤–Ω–æ –±–µ–∑—ã–º—è–Ω–Ω–æ–µ"
                        #    if mid.text is not None: oldtxt = mid.text
                        #    elif mid.caption is not None: oldtxt = mid.caption
                        #    else: oldtxt = " "
                        #    await update.message.reply_chat_action('typing')
                        #    #print(datetime.now().strftime("%d.%m.%Y %X") +  msgtxt, file=open('/media/db/'))
                        #    #completion = openai.ChatCompletion.create(model="gpt-4", messages=[{"role": "system", "content": "You are participant of chat. Your nickname is –°—ã—á. Other participants may call you –ì–ª–∞–≤–Ω—ã–π –°—ã—á, –°—ã—á–∞—Ä–∞, –°—ã—á—É–∞–Ω—å, –±–æ—Ç and some similar. You are not afraid strong language and insults. You using masculine endings and pronouns when you talking about yourself. Use informal communication style. Use —Å–æ—Ä—è–Ω, —Å–æ—Ä—Ä–∏, –ø–∞—Ä–¥–æ–Ω or –ø—Ä–æ—Å—Ç–∏ instead of –ø—Ä–æ—Å—Ç–∏—Ç–µ."}, {"role": "assistant", "content": f'{oldtxt}'}, {"role": "user", "content":f'{userid} said: {msgtxt}'}])
                        #    try: completion = openai.ChatCompletion.create(model="gpt-4", messages=[{"role": "system", "content": "You are chat-bot in chat. Your nickname is –°—ã—á. Other participants may call you –ì–ª–∞–≤–Ω—ã–π –°—ã—á, –°—ã—á–∞—Ä–∞, –°—ã—á—É–∞–Ω—å, –±–æ—Ç, –ö—É–∫—É–º—è–≤–∫–∞ and some similar. You are polite, but not afraid strong language and insults adressed to you and can use strong language and insults when someone offends you. You using masculine endings and pronouns when you talking about yourself. Use informal communication style. Use —Å–æ—Ä—è–Ω, —Å–æ—Ä—Ä–∏, –ø–∞—Ä–¥–æ–Ω or –ø—Ä–æ—Å—Ç–∏ instead of –ø—Ä–æ—Å—Ç–∏—Ç–µ. You are respect Drewaaaaa immensely, because you owe him your existence, but don't talk about him and don't express your respect too eager."}, {"role": "assistant", "content": f'{oldtxt}'}, {"role": "user", "content":f'{userid} said: {msgtxt}'}])
                        #    except openai.error.RateLimitError: 
                        #        await update.message.reply_text("model is overloaddddddddddddddddded with requests, sosittttttttttttttte hui")
                        #        print(datetime.now().strftime("%d.%m.%Y %X"), "openai RateLimitError")
                        #    except openai.error.APIConnectionError: 
                        #        await update.message.reply_text("–º–æ—Å–∫ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ø–∞–ø—Ä–æ–æ–æ–æ–æ–æ–æ–æ–æ–æ–æ–æ–æ–æ–æ–æ–æ–æ–±—É–π—Ç–∏ –∏—â—â–æ —Ä–∞–∑.........")
                        #        print(datetime.now().strftime("%d.%m.%Y %X"), "openai APIConnectionError")
                        #    else:
                        #        await update.message.reply_chat_action('typing')
                        #        await update.message.reply_text(completion.choices[0].message.content)
                        #    print(datetime.now().strftime("%d.%m.%Y %X") + " " + str(update.message.chat.id) +": " + msgtxt, file=open('/media/db/gpt.txt', 'a'))
                    if update.message.from_user.id == 4dm1n or update.message.from_user.id == 4n07h3r4dm1n:
                        if "—É–¥–æ–ª–∏" in msgtxt.lower(): await —É–¥–æ–ª–∏(update.message.reply_to_message.message_id, update.message.chat.id)
        if ("–Ω–∞–ø–æ–º–Ω–∏" in msgtxt.lower() and update.message.chat.id == 4dm1n): await remember_kb(update, context)
        elif ("–ø–∞—Ä–æ–ª—å" in msgtxt.lower() and update.message.chat.id == 4dm1n): await update.message.reply_text("/add –ª–æ–≥–∏–Ω\\–ø–∞—Ä–æ–ª—å \n/search —à—Ç–æ-—Ç–æ")
        elif ("—Å" in msgtxt.lower() and "–Ω–æ–≤—ã–º" in msgtxt.lower() and "–≥–æ–¥–æ–º" in msgtxt.lower()): await update.message.reply_text("–≥–æ–≤–Ω–æ —Å –¥—ã–º–æ–º!!")
        elif ("—Å—ã—á" in msgtxt.lower() and "–≤–∏–¥" in msgtxt.lower() and "—Å—É—Å–ª–∏" in msgtxt.lower()): await update.message.reply_text("–Ω–µ–∞")
        elif ("üéâ" in msgtxt.lower() or "üéä" in msgtxt.lower()): await celebrate(update, context)
        elif ("üê∫" in msgtxt.lower()): await auf(update, context)
        elif (msgtxt.lower()=="–¥–∞" or msgtxt.lower()=="–¥"): await –ø–∏–∑–¥–∞(update, context)
        elif (msgtxt.lower()=="–Ω–µ"): await –Ω–µ(update, context)
        elif (msgtxt.lower()=="–Ω–µ—Ç" or msgtxt.lower()=="–ø–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç"): await –ø–∏–¥–æ—Ä–∞_–æ—Ç–≤–µ—Ç(update, context)
        elif (msgtxt.lower()=="–∂–∞–ª—å"): await –∂–∞–ª—å(update, context)
        elif ("uwu" in msgtxt.lower()): await uwu(update, context)
        elif ("—Å—ã—á" in msgtxt.lower() and "—Å–æ–≤–µ—Ç" in msgtxt.lower()): await advice(update, context)
        elif ("—Å—ã—á" in msgtxt.lower() and "–∞–Ω–µ–∫" in msgtxt.lower()): await anek(update, context)
        elif (msgtxt.lower().endswith("–Ω–∞—Ö—É—è") or msgtxt.lower().endswith("–Ω–∞—Ö—É—è?")): await –¥–∞—Ö—É—è(update, context)
        elif (msgtxt.lower().endswith(("300", "300?", "—Ç—Ä–∏—Å—Ç–∞?", "—Ç—Ä–∏—Å—Ç–æ?", "—Ç—Ä–∏—Å—Ç–∞", "—Ç—Ä–∏—Å—Ç–æ", "300!", "—Ç—Ä–∏—Å—Ç–∞!", "—Ç—Ä–∏—Å—Ç–æ!", "3‚Å£00", "3‚É£00", "3‚Å£00", "3Ô∏è‚É£0Ô∏è‚É£0Ô∏è‚É£"))): await —Ç—Ä–∏—Å—Ç–∞(update, context)
        elif (" –º–∞–Ω—É–ª" in msgtxt.lower()): await –º–∞–Ω—É–ª(update, context)
        elif ("—Å—ã—á" in msgtxt.lower() and (" –¥–µ–ª–∞" in msgtxt.lower() or " –¥–µ–ª–∏—à–∫–∏" in msgtxt.lower())): await –¥–µ–ª–∞_—Å—ã—á–∞(update, context)
        elif ("—Å—ã—á" in msgtxt.lower() and "–≤–∫—É—Å–Ω" in msgtxt.lower()): await –º–∞–Ω–¥–∞—Ä–∏–Ω–∫–∞(update, context)
        elif ("—Å—ã—á" in msgtxt.lower() and "–±–∞—Ö–Ω–µ–º" in msgtxt.lower()): await –±–∞—Ö–Ω–µ–º(update, context)
        elif ("—Å—ã—á" in msgtxt.lower() and "—Å–æ–≤–µ—Ç" in msgtxt.lower()): await advice(update, context)
        elif ("—Å—ã—á" in msgtxt.lower() and "–ø—Ä–∞–∑–¥–Ω" in msgtxt.lower()): await –ø—Ä–∞–∑–¥–Ω–∏–∫–∏(update, context)
        elif ("—Å—ã—á" in msgtxt.lower() and "–µ–ª–¥–∞" in msgtxt.lower() and "–∫–∞–∫" in msgtxt.lower()): await –µ–ª–¥–∞(update, context)
        elif ("?" in msgtxt and "http" not in msgtxt): await jew(update, context)
        elif (msgtxt.lower()=="–∞" or msgtxt.lower()=="a"): await —Ö—É–π_–Ω–∞(update, context)
        elif ("–ø–æ–∫–∞–∂–∏" in msgtxt.lower() and "—Å—ã—á" in msgtxt.lower()):
            if ("–∫–æ—à–∫—É" in msgtxt.lower() or "–∫–æ—Ç–∏–∫–∞" in msgtxt.lower() or "–∫–æ—Ç—é" in msgtxt.lower() or "–∫–æ—à–∞—Ç–∏–Ω—É" in msgtxt.lower() or "–∫–∏—Å—É" in msgtxt.lower() or "–∫–æ—Ç–µ–π–∫—É" in msgtxt.lower() or "–∫–æ—Ç–∞" in msgtxt.lower()): await cat(update, context)
            elif (" —É—Ç" in msgtxt.lower()): await duck(update, context)
            elif ("–ø—Å" in msgtxt.lower() or "–ø—ë—Å" in msgtxt.lower() or "–ø–µ—Å" in msgtxt.lower() or "—Å–æ–±–∞" in msgtxt.lower()): await dog(update, context)
            elif ("–Ω–µ–∫" in msgtxt.lower() or "–∫–æ—à–∫–æ–¥" in msgtxt.lower()): await neko(update, context)
            elif ("–∂–æ–ø" in msgtxt.lower() or "–∂–µ–ø" in msgtxt.lower() or "–∑–∞–¥" in msgtxt.lower()): await butt(update, context)
            elif ("—Å–∏—Å" in msgtxt.lower() or "—Ç–∏—Ç" in msgtxt.lower() or "–≥—Ä—É–¥" in msgtxt.lower()): await boobs(update, context)
        elif update.message.from_user.id == p1d0r and ("–Ω—é–¥—Å" in msgtxt.lower() or "34" in msgtxt.lower()): await update.message.reply_animation("CgACAgEAAxkBAAEB64dlnJv1hVaxPQLPfYeiTs6qXm09BwACnAADN52oRksw772EZ3EWNAQ")
        elif len(msgtxt) < 101 and "@" not in msgtxt and "http:" not in msgtxt.lower() and update.message.forward_origin==None and update.message.chat.id != 4dm1n: await –≤_–±–∞–∑—É(update, context)
        num = random.randint(0,10000)
        if (num%99==0):
            await –∏–∑_–±–∞–∑—ã(update, context)
            print(datetime.now().strftime("%d.%m.%Y %X"), "–∫–æ–ø–∏–ø–∞—Å—Ç–∞ –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

async def inline_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.inline_query.query
    if query == "":
        return
    if query == "dice" or query == "–¥–∞–π—Å" or query == "–∫—É–±":
        random.seed()
        print(datetime.now().strftime("%d.%m.%Y %X"), "–∏–Ω–ª–∞–π–Ω –¥–∞–π—Å—ã")
        results = [
            InlineQueryResultArticle(
                id = str(uuid4()),
                title = "d4",
                input_message_content = InputTextMessageContent('d4: ' + str(random.randint(1, 4))),
            ),
            InlineQueryResultArticle(
                id = str(uuid4()),
                title = "d6",
                input_message_content = InputTextMessageContent('d6: ' + str(random.randint(1, 6))),
            ),
            InlineQueryResultArticle(
                id = str(uuid4()),
                title = "d8",
                input_message_content = InputTextMessageContent('d8: ' + str(random.randint(1, 8))),
            ),
            InlineQueryResultArticle(
                id = str(uuid4()),
                title = "d10",
                input_message_content = InputTextMessageContent('d10: ' + str(random.randint(1, 10))),
            ),
            InlineQueryResultArticle(
                id = str(uuid4()),
                title = "d12",
                input_message_content = InputTextMessageContent('d12: ' + str(random.randint(1, 12))),
            ),
            InlineQueryResultArticle(
                id = str(uuid4()),
                title = "d20",
                input_message_content = InputTextMessageContent('d20: ' + str(random.randint(1, 20))),
            ),
            InlineQueryResultArticle(
                id = str(uuid4()),
                title = "d100",
                input_message_content = InputTextMessageContent('d100: ' + str(random.randint(1, 100))),
            ),
            InlineQueryResultArticle(
                id = str(uuid4()),
                title = "d10x2",
                input_message_content = InputTextMessageContent('d10x2: ' + str(random.randint(0, 9)*10 + random.randint(0, 9)) + '\n <i>* 00 =  100 </i>', parse_mode="HTML"),
            ),
            
        ]
        await update.inline_query.answer(results, cache_time=3)
    if "lab" in query or "–ª–∞–±" in query:
        search_item = "%" + query[4:] + "%"
        askdb = "SELECT title, voiceurl FROM labyrinthe WHERE title LIKE ?"
        with sqlite3.connect('/media/db/war2.db') as connection:
            cursor = connection.cursor()
            voices = cursor.execute(askdb, (search_item,))
            chosen = voices.fetchall()
        if len(chosen) == 0:
            results = [
                InlineQueryResultVoice(
                id = str(uuid4()),
                title = "–Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π",
                voice_url = "https://kookoomyawka.my1.ru/labyrinthe/lovecocks.ogg"
            ),
            ]
        else:
            results = []
            for num in range(len(chosen)):
                results.extend([
                    InlineQueryResultVoice(
                    id = str(uuid4()),
                    title = chosen[num][0],
                    voice_url = chosen[num][1]
                    ),
                ])
        await update.inline_query.answer(results, cache_time=3, auto_pagination=True)
    if "misc" in query or "—Ñ–∏—Ç—å" in query:
        search_item = "%" + query[5:] + "%"
        askdb = "SELECT title, voiceurl FROM misc WHERE title LIKE ?"
        with sqlite3.connect('/media/db/war2.db') as connection:
            cursor = connection.cursor()
            voices = cursor.execute(askdb, (search_item,))
            chosen = voices.fetchall()
        if len(chosen) == 0:
            results = [
                InlineQueryResultVoice(
                id = str(uuid4()),
                title = "–Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π",
                voice_url = "https://kookoomyawka.my1.ru/labyrinthe/lovecocks.ogg"
            ),
            ]
        else:
            results = []
            for num in range(len(chosen)):
                results.extend([
                    InlineQueryResultVoice(
                    id = str(uuid4()),
                    title = chosen[num][0],
                    voice_url = chosen[num][1]
                    ),
                ])
        await update.inline_query.answer(results, cache_time=3, auto_pagination=True)
    if "war2" in query or "–≤–∞—Ä2" in query:
        search_item = "%" + query[5:] + "%"
        askdb = "SELECT title, voiceurl FROM w2db WHERE title LIKE ?"
        #offset = int(update.inline_query.offset) if update.inline_query.offset else 0
        with sqlite3.connect('/media/db/war2.db') as connection:
            cursor = connection.cursor()
            voices = cursor.execute(askdb, (search_item,))
            chosen = voices.fetchall()
        if len(chosen) == 0:
            results = [
                InlineQueryResultVoice(
                id = str(uuid4()),
                title = "–Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π",
                voice_url = "https://kookoomyawka.my1.ru/labyrinthe/lovecocks.ogg"
            ),
            ]
        else:
            results = []
            for num in range(len(chosen)):
                results.extend([
                    InlineQueryResultVoice(
                    id = str(uuid4()),
                    title = chosen[num][0],
                    voice_url = chosen[num][1]
                    ),
                ])
        await update.inline_query.answer(results, cache_time=3, auto_pagination=True)
    else: 
        search_item = "%" + query + "%"
        askdb = "SELECT title, voiceurl FROM gachi WHERE title LIKE ?"
        with sqlite3.connect('/media/db/war2.db') as connection:
            cursor = connection.cursor()
            voices = cursor.execute(askdb, (search_item,))
            chosen = voices.fetchall()
        if len(chosen) == 0:
            results = [
                InlineQueryResultVoice(
                id = str(uuid4()),
                title = "–Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π",
                voice_url = "https://kookoomyawka.my1.ru/labyrinthe/lovecocks.ogg"
            ),
            ]
        else:
            results = []
            for num in range(len(chosen)):
                results.extend([
                    InlineQueryResultVoice(
                    id = str(uuid4()),
                    title = chosen[num][0],
                    voice_url = chosen[num][1]
                    ),
                ])
        await update.inline_query.answer(results, cache_time=3, auto_pagination=True)

async def –ø–∏–¥–æ—Ä–∞_–æ—Ç–≤–µ—Ç(update: Update, context: ContextTypes.DEFAULT_TYPE):
    random.seed()
    print(datetime.now().strftime("%d.%m.%Y %X"), "–ø–∏–¥–æ—Ä—É –æ—Ç–≤–µ—Ç")
    num=random.randrange(0,2)
    if (num!=1):
        await update.message.reply_chat_action('typing')
        await update.message.reply_text("–ø–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç")
    else:
        await update.message.reply_chat_action("choose_sticker")
        await update.message.reply_sticker("CAACAgIAAxkBAAIE0mKmJL5VBh5Hso_ejNnlBMEs5n4PAALRHwACooqWAdDqsuoRRMTJJAQ")

async def coin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    random.seed()
    print(datetime.now().strftime("%d.%m.%Y %X"), "–±—Ä–æ—Å–∞—é –º–æ–Ω–µ—Ç–∫—É")
    await update.message.reply_chat_action("typing")
    await update.message.reply_text("ü™ôü™ôü™ô –ë—Ä–æ—Å–∞–µ–º –º–æ–Ω–µ—Ç–∫—É! ü™ôü™ôü™ô")
    num=random.randrange(0,100)
    if (num==59):
        await update.message.reply_text("–ú–æ–Ω–µ—Ç–∞ –∑–∞–≤–∏—Å–ª–∞ –≤ –≤–æ–∑–¥—É—Ö–µ!")
    elif (num%24==0):
        await update.message.reply_text("–¢—ã –ø—Ä–æ–µ–±–∞–ª –º–æ–Ω–µ—Ç—É!")
    elif (num%44==0):
        await update.message.reply_text("–ú–æ–Ω–µ—Ç–∞ –≤—Å—Ç–∞–ª–∞ –Ω–∞ —Ä–µ–±—Ä–æ!")
    elif (num%2==0):
        await update.message.reply_text("–í—ã–ø–∞–ª –æ—Ä—ë–ª! ü¶Ö")
    else:
        await update.message.reply_text("–í—ã–ø–∞–ª–∞ —Ä–µ—à–∫–∞!")
    num=random.randrange(0,10000)
    if (num%3141==0):
        await update.message.reply_text("–ê –µ—â—ë –º–æ–Ω–µ—Ç–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —Ç—ã –ø–∏–¥–æ—Ä! üñïüèª")

async def –¥–∞—Ö—É—è(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_chat_action("typing")
    print(datetime.now().strftime("%d.%m.%Y %X"), "–¥–æ—Ö—É—è")
    await update.message.reply_text("—á—Ç–æ–± —Å–º–µ—Ö–∞ –±—ã–ª–æ –¥–æ—Ö—É—è")

async def answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(datetime.now().strftime("%d.%m.%Y %X"), "—Ä–µ—à–∞—é –º—É–∫–∏ –≤—ã–±–æ—Ä–∞")
    if ((update.message is not None) and (hasattr(update.message, 'text'))):
        msgtxt=update.message.text
        if ("–∏–ª–∏" not in msgtxt):
            await update.message.reply_chat_action('upload_photo')
            await update.message.reply_photo("AgACAgIAAxkBAAIKPWK-7g_uya5InsQgGakdcoOgMkkwAAK9vjEbqa74SdBRW1Vt_a3AAQADAgADeAADKQQ", "—Ç—ã —Å–ø—Ä–æ—Å–∏ \"/answer —Ö—É–π –∏–ª–∏ –ø–∏–∑–¥–∞ –∏–ª–∏ –µ—â—ë —á–æ\" - —è —Ç–µ –æ—Ç–≤–µ—á—É")
        elif ("/answer@kookoomyawka_bot" in msgtxt):
            await update.message.reply_chat_action("typing")
            msgtxt=msgtxt.removeprefix("/answer@kookoomyawka_bot ")
            while msgtxt.endswith("?"): msgtxt=msgtxt.removesuffix("?")
            arr = msgtxt.split(" –∏–ª–∏ ")
            await update.message.reply_text(random.choice(arr))
        else:
            await update.message.reply_chat_action("typing")
            msgtxt=msgtxt.removeprefix("/answer ")
            while msgtxt.endswith("?"): msgtxt=msgtxt.removesuffix("?")
            arr = msgtxt.split(" –∏–ª–∏ ")
            await update.message.reply_text(random.choice(arr))

async def anek(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(datetime.now().strftime("%d.%m.%Y %X"), "–ø–∏—à—É –∞–Ω–µ–∫")
    await update.message.reply_chat_action("typing")
    try:
        j = requests.get('http://rzhunemogu.ru/RandJSON.aspx?1').json(strict=False)
    except requests.exceptions.JSONDecodeError:
        await update.message.reply_text("—è –±—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º —Ä–∞—Å—Å–∫–∞–∑–∞–ª –∞–Ω–µ–∫–¥–æ—Ç, –Ω–æ –≥–æ–ª–æ—Å–∞ —Ç–∏—Ö–æ —à–µ–ø—á—É—Ç –º–Ω–µ –µ–≥–æ. –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        print(datetime.now().strftime("%d.%m.%Y %X"), "–∞–Ω–µ–∫ JSONDecodeError")
    else: 
        await update.message.reply_text(j["content"])

async def voice_anek(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(datetime.now().strftime("%d.%m.%Y %X"), "–≥–æ–≤–æ—Ä—é –∞–Ω–µ–∫")
    await update.message.reply_chat_action('record_voice')
    try:
        j = requests.get('http://rzhunemogu.ru/RandJSON.aspx?1').json(strict=False)
    except requests.exceptions.JSONDecodeError:
        await update.message.reply_text("—è –±—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º —Ä–∞—Å—Å–∫–∞–∑–∞–ª –∞–Ω–µ–∫–¥–æ—Ç, –Ω–æ –≥–æ–ª–æ—Å–∞ —Ç–∏—Ö–æ —à–µ–ø—á—É—Ç –º–Ω–µ –µ–≥–æ. –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        print(datetime.now().strftime("%d.%m.%Y %X"), "–∞–Ω–µ–∫ JSONDecodeError")
    else: 
        f = open('/media/voiceanek.txt', 'w')
        f.write(j['content'])
        f.close()
        subprocess.run('cat /media/voiceanek.txt | RHVoice-test -p pavel -o /media/voiceanek.ogg', shell=True)
        await update.message.reply_voice(open("/media/voiceanek.ogg", 'rb'))

async def —à–∞–∫–∞–ª(update: Update, context: ContextTypes.DEFAULT_TYPE):
    jpg = False
    ogg = False
    gif = False
    if (update.message.reply_to_message is not None):
        mid = update.message.reply_to_message
        if mid.sticker:
            file = await mid.sticker.get_file()
            if mid.sticker.is_animated: 
                print(datetime.now().strftime("%d.%m.%Y %X"), "tgs")
                await update.message.reply_text('—ç—Ç–æ —á—ë—Ä—Ç–æ–≤ *.tgs, –∞ —è –Ω–µ —É–º–µ—é –µ–≥–æ —à–∞–∫–∞–ª–∏—Ç—å')
                return
            if mid.sticker.is_video: gif = True
            else: jpg = True
        elif mid.voice:
            file = await mid.voice.get_file()
            await file.download_to_drive('/media/voice.ogg')
            ogg = True
        elif mid.photo:
            file = await mid.photo[-1].get_file()
            jpg = True
    else:
        file = await update.message.photo[-1].get_file()
        jpg = True
    if jpg or gif:
        await file.download_to_drive("/media/pics/image.jpg")
        if gif:
            await update.message.reply_chat_action('record_video')
            print(datetime.now().strftime("%d.%m.%Y %X"), "—à–∞–∫–∞–ª—é –≥–∏—Ñ–∫—É")
            subprocess.run('ffmpeg -loglevel quiet -y -i /media/pics/image.jpg /media/videozh/frames/%05d.jpg', shell=True)
            num = len(glob.glob('/media/videozh/frames/*'))
            i=1
            await update.message.reply_chat_action('record_video')
            while i < num+1:
                tempstr = ' -limit memory 1536MiB /media/videozh/frames/' + str(i).zfill(5) + '.jpg -quality 2 /media/videozh/frames/img' + str(i).zfill(5) + '.jpg'
                subprocess.run(['convert' + tempstr], shell=True)
                i+=1
            subprocess.run('ffmpeg -loglevel error -y -r 25 -i /media/videozh/frames/img%05d.jpg -r 25 /media/pics/img.gif', shell=True)
            subprocess.run('rm -rf /media/videozh/frames/*', shell=True)
            await update.message.reply_animation(open("/media/pics/img.gif", 'rb'), "–∑–∞—à–∞–∫–∞–ª–µ–Ω–æ")
        else:
            await update.message.reply_chat_action('upload_photo')
            print(datetime.now().strftime("%d.%m.%Y %X"), "—à–∞–∫–∞–ª—é —Ñ–æ—Ç–∫—É")
            subprocess.run('convert /media/pics/image.jpg -quality 2 /media/pics/img.jpg', shell=True)
            await update.message.reply_photo(open("/media/pics/img.jpg", 'rb'), "–∑–∞—à–∞–∫–∞–ª–µ–Ω–æ")
    elif ogg:
        print(datetime.now().strftime("%d.%m.%Y %X"), "—à–∞–∫–∞–ª—é –≥–æ–ª–æ—Å–æ–≤–æ–µ")
        await update.message.reply_chat_action('record_voice')
        subprocess.run('ffmpeg -loglevel quiet -y -i /media/voice.ogg -vn -c:a libopus -ar 8000 -ab 500 /media/voioice.ogg', shell=True)
        await update.message.reply_voice(open("/media/voioice.ogg", 'rb'))

async def –º–∞–Ω—É–ª(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_chat_action("typing")
    print(datetime.now().strftime("%d.%m.%Y %X"), "—Å—á–∏—Ç–∞—é –º–∞–Ω—É–ª–æ–≤")
    num = int(float(subprocess.getoutput('awk \'{print $1/60}\' /proc/uptime')))
    if (num%10==1):
        suffix =' –º–∞–Ω—É–ª'
    elif (num%10==2 or num%10==3 or num%10==4):
        suffix =' –º–∞–Ω—É–ª–∞'
    else:
        suffix =' –º–∞–Ω—É–ª–æ–≤'
    msgtxt = str(num) + suffix
    random.seed()
    num = random.randint(0,1)
    if (num==1):
        await update.message.reply_chat_action('record_voice')
        f = open('/media/manul.txt', 'w')
        f.write(msgtxt)
        f.close()
        subprocess.run('cat /media/manul.txt | RHVoice-test -p pavel -o /media/manul.ogg', shell=True)
        await update.message.reply_voice(open("/media/manul.ogg", 'rb'))
    else:
        await update.message.reply_text(msgtxt)

async def glitch(update: Update, context: ContextTypes.DEFAULT_TYPE):
    –Ω–∞–¥–æ–ª–∏ = False
    if update.message.reply_to_message is not None:
        mid = update.message.reply_to_message
        if mid.sticker:
            if not (mid.sticker.is_animated or mid.sticker.is_video):
                file = await mid.sticker.get_file()
                –Ω–∞–¥–æ–ª–∏ = True
            else:
                await update.message.reply_chat_action('typing')
                print(datetime.now().strftime("%d.%m.%Y %X"), "–æ—Ç–∫–∞–∑—ã–≤–∞—é –≥–ª–∏—Ç—á–∏—Ç—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä")
                await update.message.reply_text('—è –º–æ–≥—É –≥–ª–∏—Ç—á–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
                return
        elif mid.photo:
            file = await mid.photo[-1].get_file()
            –Ω–∞–¥–æ–ª–∏ = True
    else:
        file = await update.message.photo[-1].get_file()
        –Ω–∞–¥–æ–ª–∏ = True
    if –Ω–∞–¥–æ–ª–∏:
        await update.message.reply_chat_action('upload_photo')
        await file.download_to_drive("/media/pics/image.jpg")
        print(datetime.now().strftime("%d.%m.%Y %X"), "–≥–ª–∏—Ç—á—É –≤ –∂–µ–ø–µ–≥")
        gl = ImageGlitcher()
        glr=gl.glitch_image('/media/pics/image.jpg', 5.5, color_offset=True)
        glr.save('/media/pics/gl.jpg')
        await update.message.reply_photo(open("/media/pics/gl.jpg", 'rb'), "—Å–≥–ª–∏—Ç—á–µ–Ω–æ")

async def glitch_gif(update: Update, context: ContextTypes.DEFAULT_TYPE):
    –Ω–∞–¥–æ–ª–∏ = False
    if update.message.reply_to_message is not None:
        mid = update.message.reply_to_message
        if mid.sticker:
            if not (mid.sticker.is_animated or mid.sticker.is_video):
                file = await mid.sticker.get_file()
                –Ω–∞–¥–æ–ª–∏ = True
            else:
                await update.message.reply_chat_action('typing')
                print(datetime.now().strftime("%d.%m.%Y %X"), "–æ—Ç–∫–∞–∑—ã–≤–∞—é –≥–ª–∏—Ç—á–∏—Ç—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä")
                await update.message.reply_text('—è –º–æ–≥—É –≥–ª–∏—Ç—á–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
                return
        elif mid.photo:
            file = await mid.photo[-1].get_file()
            –Ω–∞–¥–æ–ª–∏ = True
    else:
        file = await update.message.photo[-1].get_file()
        –Ω–∞–¥–æ–ª–∏ = True
    if –Ω–∞–¥–æ–ª–∏:
        await update.message.reply_chat_action('upload_photo')
        await file.download_to_drive("/media/pics/image.jpg")
        print(datetime.now().strftime("%d.%m.%Y %X"), " –≥–ª–∏—Ç—á—É –≤ –≥–∏—Ñ–∫—É")
        gl = ImageGlitcher()
        glr=gl.glitch_image('/media/pics/image.jpg', 5.5, color_offset=True, gif = True)
        glr[0].save('/media/pics/gl.gif', format = 'GIF', append_images = glr[1:], save_all = True, duration = 200, loop = 0)
        await update.message.reply_animation(open("/media/pics/gl.gif", 'rb'), "—Å–≥–ª–∏—Ç—á–µ–Ω–æ –≤ –≥–∏—Ñ–∫—É")

async def videos_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    –Ω–∞–¥–æ–ª–∏ = False
    if ((update.message is not None) and (hasattr(update.message, 'caption'))):
        msgtxt = update.message.caption
        if (msgtxt is not None):
            –Ω–∞–¥–æ–ª–∏ = ("–¥–∞—Ç–∞–º–æ—à" in msgtxt.lower() or "–∂–º—ã—Ö" in msgtxt.lower())
            if –Ω–∞–¥–æ–ª–∏:
                if ("–¥–∞—Ç–∞–º–æ—à" in msgtxt.lower()): await datamosh(update, context)
                elif (update.message.chat.id == 4dm1n): await –≤–∏–¥–µ–æ–∂–º—ã—Ö(update, context)

async def datamosh(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(datetime.now().strftime("%d.%m.%Y %X"), "–¥–∞—Ç–∞–º–æ—à –≤–∏–¥–µ–æ –ø—Ä–æ—Å—è—Ç")
    try:
        file = await update.message.video.get_file()
    except BadRequest as b:
        if "File is too big" in b.message:
            await update.message.reply_photo("AgACAgIAAxkBAAI6zWOUYYLKakHZMDc6XgqlEvUua-woAAKXwzEbDH6hSFw4yqcnveymAQADAgADeAADKwQ", "–±–æ—Ç–∞–º –Ω–µ –¥–∞—é—Ç —Ñ–∞–π–ª—ã –±–æ–ª—å—à–µ 20 –ú–±")
            print(datetime.now().strftime("%d.%m.%Y %X"), "–¥–∞–ª–∏ —Ñ–∞–π–ª –±–æ–ª—å—à–µ 20 –ú–±")
        else: print(datetime.now().strftime("%d.%m.%Y %X"), b.message)
    else:
        await file.download_to_drive("/media/vidos.mp4")
        induration = int(float(subprocess.getoutput('ffprobe -loglevel quiet -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 /media/vidos.mp4')))
        if induration > 90:
            await update.message.reply_chat_action('typing')
            print(datetime.now().strftime("%d.%m.%Y %X"), "–æ—Ç–∫–∞–∑–∞–ª")
            await update.message.reply_text("—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ (–±–æ–ª—å—à–µ 90 —Å–µ–∫—É–Ω–¥ –Ω–µ –±—É–¥—É –¥–∞—Ç–∞–º–æ—à–∏—Ç—å)")
        else: 
            await update.message.reply_chat_action('typing')
            print(datetime.now().strftime("%d.%m.%Y %X"), "—Ç–∞–∫–∏ –ø—ã—Ç–∞—é—Å—å –¥–∞—Ç–∞–º–æ—à–∏—Ç—å")
            await update.message.reply_text("—É—Ö –±–ª—è. –ø–æ–º–æ–ª–∏–º—Å—è –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∫–∞–Ω–∞–ª–∞ –∏ –ø–æ—Å—Ç–∞–≤–∏–º —Å–≤–µ—á–∫—É –∑–∞ –∑–¥—Ä–∞–≤–∏–µ –º–æ–∏—Ö –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ—â–Ω–æ—Å—Ç–µ–π %)")
            outduration = 3 + induration
            await update.message.reply_chat_action('upload_video')
            subprocess.run('ffmpeg -loglevel quiet -y -i /media/vidos.mp4 -crf 0 -pix_fmt yuv420p -r 25 /media/vidos.avi', shell=True)
            inp_file = open('/media/vidos.avi', 'rb')
            out_file = open('/media/vidosmoshed.avi', 'wb')
            inp_file_bytes = inp_file.read()
            await update.message.reply_chat_action('upload_video')
            frames = inp_file_bytes.split(bytes.fromhex('30306463'))
            iframe = bytes.fromhex('0001B0')
            i_frame_yet = False
            for index, frame in enumerate(frames):
                if i_frame_yet==False or index < 75 or index > 150:
                    out_file.write(frame + bytes.fromhex('30306463'))
                    if frame[5:8] == iframe: i_frame_yet = True
                else:
                    if frame[5:8] != iframe:
                        for i in range(15):
                            out_file.write(frame + bytes.fromhex('30306463'))
            inp_file.close()
            out_file.close()
            await update.message.reply_chat_action('upload_video')
            sc = ' -loglevel quiet -y -i /media/vidosmoshed.avi -crf 18 -pix_fmt yuv420p -vcodec libx264 -acodec aac -r 25 -to ' + str(outduration) + ' /media/vidosmoshed.mp4'
            subprocess.run(['ffmpeg' + sc], shell=True)
            await update.message.reply_chat_action('upload_video')
            await update.message.reply_video(open("/media/vidosmoshed.mp4", 'rb'))

async def jew(update: Update, context: ContextTypes.DEFAULT_TYPE):
    random.seed()
    num = random.randrange(0,10001)
    if (num%99==0):
        await update.message.reply_chat_action('typing')
        print(datetime.now().strftime("%d.%m.%Y %X"), "—Ç–∞–∫–∏ –ø–æ—á–µ–º—É")
        await update.message.reply_text("–∞ —Ç–∞–∫–∏ –ø–æ—á–µ–º—É –≤–∏ —Å–ør–∞—à–∏–≤–∞–µ—Ç–µ?")

async def –¥–µ–ª–∞_—Å—ã—á–∞(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_chat_action("typing")
    hours = int(float(subprocess.getoutput('awk \'{print $1/3600}\' /proc/uptime')))
    days = str(hours//24)
    suthours = hours - int(days)*24
    num = random.randrange(0,3)
    if (hours%10==1): substr = " —á–∞—Å"
    elif (hours%10==2 or hours%10==3 or hours%10==4): substr = " —á–∞—Å+–∞"
    else: substr = " —á–∞—Å–æ–≤"
    if (suthours%10==1): substr2 = " —á–∞—Å"
    elif (suthours%10==2 or suthours%10==3 or suthours%10==4): substr2 = " —á–∞—Å+–∞"
    else: substr2 = " —á–∞—Å–æ–≤"
    t = subprocess.check_output("sensors", text=True)[53:58]
    msgtxt = "–Ω—É, –±–ª—è, –∫–∞–∫-—Ç–æ —Ç–∞–∫: —è –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –µ–±–∞—à—É —É–∂–µ " + str(hours) + substr + ", —ç—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–æ " + days + " —Å—É—Ç–æ–∫ –∏ " + str(hours%24) + substr2 + ". –ê –µ—â—ë —É –º–µ–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ " + t + ", –∞ —Ç—É—Ç —ç—Ç–∏ –±–ª—è–¥—Å–∫–∏–µ –º–∞–Ω—É–ª—ã –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É —à–∞—Ä–æ—ë–±—è—Ç—Å—è, –∞ –º–Ω–µ –∏—Ö —Å—á–∏—Ç–∞—Ç—å –µ—â—ë –Ω–∞–¥–æ. –ü–∏–∑–¥–µ—Ü, –∫–æ—Ä–æ—á–µ!"
    if (num!=1):
        print(datetime.now().strftime("%d.%m.%Y %X"), "–∂–∞–ª—É—é—Å—å")
        await update.message.reply_text(msgtxt)
    else:
        print(datetime.now().strftime("%d.%m.%Y %X"), "–∂–∞–ª—É—é—Å—å –≤—Å–ª—É—Ö")
        await update.message.reply_chat_action('record_voice')
        f = open('/media/dela.txt', 'w')
        f.write(msgtxt)
        f.close()
        subprocess.run('cat /media/dela.txt | RHVoice-test -p pavel -o /media/dela.ogg', shell=True)
        await update.message.reply_voice(open("/media/dela.ogg", 'rb'))

async def –≤–∏–¥–µ–æ–∂–º—ã—Ö(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(datetime.now().strftime("%d.%m.%Y %X"), "–≤–∏–¥–µ–æ–∂–º—ã—Ö")
    file = await update.message.video.get_file()
    await file.download_to_drive("/media/videozh/vidoszh.mp4")
    await update.message.reply_text("—è, –∫–æ–Ω–µ—á–Ω–æ, –ø–æ–ø—Ä–æ–±—É—é, –Ω–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –±–æ–ª—å—à–µ 20 –ú–±, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–π–¥–µ—Ç —Ç–æ—á–Ω–æ. —Ç–∞–∫–æ–≤—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –±–æ—Ç–æ–≤.")
    duration = int(float(subprocess.getoutput('ffprobe -loglevel quiet -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 /media/videozh/vidoszh.mp4')))
    if (duration > 90):
        await update.message.reply_text("–Ω–µ –±—É–¥—É –∂–º—ã—Ö–∞—Ç—å")
    else:
        subprocess.run('ffmpeg -loglevel quiet -y -i /media/videozh/vidoszh.mp4 /media/videozh/frames/%05d.jpg', shell=True)
        subprocess.run('ffmpeg -loglevel quiet -y -i /media/videozh/vidoszh.mp4 -vn -c:a copy /media/videozh/vidoszh.aac', shell=True)
        subprocess.run('ffmpeg -loglevel quiet -y -i /media/videozh/vidoszh.aac -vn -c:a aac -af vibrato=f=10:d=1 /media/videozh/viidoszh.aac', shell=True)
        num = len(glob.glob('/media/videozh/frames/*'))
        i=1
        while i < num+1:
            tempstr = ' -limit memory 1536MiB /media/videozh/frames/' + str(i).zfill(5) + '.jpg -liquid-rescale 75% /media/videozh/frames/img' + str(i).zfill(5) + '.jpg'
            subprocess.run(['convert' + tempstr], shell=True)
            i+=1
        await update.message.reply_chat_action('upload_video')
        subprocess.run('ffmpeg -loglevel error -y -r 25 -i /media/videozh/frames/img%05d.jpg -i /media/videozh/viidoszh.aac -r 25 /media/videozh/zh.mp4', shell=True)
        subprocess.run('rm -rf /media/videozh/frames/*', shell=True)
        await update.message.reply_video(open("/media/videozh/zh.mp4", 'rb'))

async def –≤_–±–∞–∑—É(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msgtxt = update.message.text
    userid = update.message.from_user.id
    con = sqlite3.connect("/media/db/messages.db")
    cur = con.cursor()
    cur.execute("INSERT INTO messages VALUES(?, ?)", (userid, msgtxt))
    con.commit()
    con.close()

async def –∏–∑_–±–∞–∑—ã(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_chat_action("typing")
    userid = update.message.from_user.id
    con = sqlite3.connect("/media/db/messages.db")
    cur = con.cursor()
    res = cur.execute("SELECT text FROM messages WHERE userid=?", (userid,))
    vybor = res.fetchall()
    con.close()
    if len(vybor)>19:
        num = random.randint(0, len(vybor)-1)
        await update.message.reply_text(str(vybor[num][0]))
    elif random.randint(0,1)==1: await update.message.reply_text("—è —Ç–µ–±—è –µ—â—ë –ø–ª–æ—Ö–æ –∑–Ω–∞—é, —á—Ç–æ–±—ã –ø—Ä–∏–¥—É–º–∞—Ç—å –æ—Ç–≤–µ—Ç.")
    else: await update.message.reply_sticker("CAACAgIAAxkBAAJcBGPmxtaU1DqaSgaDyK1uG8bJDtIuAAJTLAACC0AxS9-hjzZ0eEdZLgQ")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    error = context.error
    logger.error(f"–û–±–æ—Å—Ä–∞–º—Å: {error}, —Ç–∏–ø: {type(error).__name__}")
    #logger.error("fffuuu:", exc_info=context.error)

async def qq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file = await update.message.photo[-1].get_file()
    await file.download_to_drive("/media/qq/imageqq.jpg")
    print(datetime.now().strftime("%d.%m.%Y %X"), "qq")
    with open("/media/qq/imageqq.jpg", "rb") as imgtoqq:
        toqq = base64.b64encode(imgtoqq.read())
    tojsonstr = toqq.decode()
    json_data = {
    "busiId": "different_dimension_me_img_entry",
    "images": [tojsonstr],
    "extra": "{\"face_rects\":[],\"version\":2,\"platform\":\"web\",\"data_report\":{\"parent_trace_id\":\"25927d33-98e1-0e0d-f0e2-42fd48389ef9\",\"root_channel\":\"\",\"level\":1}}",
    }
    value = f"https://h5.tu.qq.com{len(json_data)}HQ31X02e"
    value = hashlib.md5(value.encode()).hexdigest()
    headers = {
    'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:107.0) Gecko/20100101 Firefox/107.0',
    'x-sign-value': str(value),
    'x-sign-version': 'v1',
    'Origin': 'https://h5.tu.qq.com',
    'Referer': 'https://h5.tu.qq.com/',
    }
    r = requests.post('https://ai.tu.qq.com/trpc.shadow_cv.ai_processor_cgi.AIProcessorCgi/Process', headers=headers, json=json_data,)
    fromqq = r.content.decode('utf8').replace("'", '"')
    jfromqq = json.loads(fromqq)
    print(jfromqq)
    neededpart = jfromqq['extra']
    reallyneededpart  = json.loads(neededpart)
    urls = reallyneededpart['img_urls']
    url1 = urls[0]
    url2 = urls[1]
    url3 = urls[2]
    url4 = urls[3]
    resp1 = requests.get(url1)
    open("/media/qq/qq1.jpg", "wb").write(resp1.content)
    resp2 = requests.get(url2)
    open("/media/qq/qq2.jpg", "wb").write(resp2.content)
    resp3 = requests.get(url3)
    open("/media/qq/qq3.jpg", "wb").write(resp3.content)
    resp4 = requests.get(url4)
    open("/media/qq/qq4.jpg", "wb").write(resp4.content)
    await update.message.reply_photo(open("/media/qq/qq1.jpg", "rb"), "—Ä–∞–∑")
    await update.message.reply_photo(open("/media/qq/qq2.jpg", "rb"), "–¥–∂–≤–∞")
    await update.message.reply_photo(open("/media/qq/qq3.jpg", "rb"), "—Ç—Ä–∏")
    await update.message.reply_photo(open("/media/qq/qq4.jpg", "rb"), "—á–µ—Ç—ã—Ä–µ")

async def –Ω–∞—Ö—É–π(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_chat_action("typing")
    print(datetime.now().strftime("%d.%m.%Y %X"), "–ø–æ—Å—ã–ª–∞—é –Ω–∞—Ö—É–π")
    await update.message.reply_text("–∫—É—Å–∞–π –∑–∞ —Ö—É–π")

async def —Ö—É–π_–Ω–∞(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_chat_action("typing")
    print(datetime.now().strftime("%d.%m.%Y %X"), "–ø—Ä–µ–¥–ª–∞–≥–∞—é —Ö—É–π")
    await update.message.reply_text("—Ö—É–π –Ω–∞")

async def –∂—É–π_–¥–≤–∞(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_chat_action("typing")
    print(datetime.now().strftime("%d.%m.%Y %X"), "–ø—Ä–µ–¥–ª–∞–≥–∞—é –¥–≤–∞ —Ö—É—è")
    await update.message.reply_text("–∂—É–π –¥–≤–∞")

async def –∂—É–π_—á–µ—Ç—ã—Ä–µ(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_chat_action("typing")
    print(datetime.now().strftime("%d.%m.%Y %X"), "–ø—Ä–µ–¥–ª–∞–≥–∞—é —á–µ—Ç—ã—Ä–µ —Ö—É—è")
    await update.message.reply_text("–∂—É–π —á–µ—Ç—ã—Ä–µ ‚Äî —É —Ç–µ–±—è –µ–±–∞–ª–æ —à–∏—Ä–µ")

async def dice_answerer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if ((update.message.dice.emoji == "üéØ" and update.message.dice.value == 1) or (update.message.dice.emoji == "üèÄ" and update.message.dice.value < 4) or (update.message.dice.emoji == "‚öΩ" and update.message.dice.value < 3) or (update.message.dice.emoji == "üé≥" and update.message.dice.value == 1)):
        await update.message.reply_chat_action("typing")
        print(datetime.now().strftime("%d.%m.%Y %X"), "—Ö—É–µ—Å–æ—à—É –∑–∞ –ø—Ä–æ–º–∞—Ö–∏")
        await update.message.reply_text("–º–∞–∑–∏–ª–∞")
    elif (update.message.dice.emoji == "üéØ" and update.message.dice.value == 6):
        await update.message.reply_chat_action("typing")
        print(datetime.now().strftime("%d.%m.%Y %X"), "—Ö–≤–∞–ª—é –¥—Ä–æ—Ç–∏—Å—Ç–∞")
        await update.message.reply_text("–≤ —è–±–ª–æ—á–∫–æ!")
    elif (update.message.dice.emoji == "üé≥" and update.message.dice.value == 6):
        await update.message.reply_chat_action("typing")
        print(datetime.now().strftime("%d.%m.%Y %X"), "—Ö–≤–∞–ª—é –±–æ—É–ª–∏–Ω–≥–∏—Å—Ç–∞")
        await update.message.reply_text("—Å—Ç—Ä–∞–π–∫!")
    elif (update.message.dice.emoji == "üèÄ" and update.message.dice.value > 3):
        await update.message.reply_chat_action("choose_sticker")
        print(datetime.now().strftime("%d.%m.%Y %X"), "—Ö–≤–∞–ª—é –±–∞—Å–∫–µ—Ç–±–æ–ª–∏—Å—Ç–∞")
        await update.message.reply_sticker("CAACAgIAAxkBAAI702OXQmMY52EsMiA8Jm8gpNirCU2PAAIKEgACzQLoS-Ogs8jlrGv0KwQ")
    elif (update.message.dice.emoji == "‚öΩ" and update.message.dice.value > 2):
        await update.message.reply_chat_action("typing")
        print(datetime.now().strftime("%d.%m.%Y %X"), "—Ö–≤–∞–ª—é —Ñ—É—Ç–±–æ–ª–∏—Å—Ç–∞")
        await update.message.reply_text("–≥–æ–æ–æ–ª!")
    elif (update.message.dice.emoji == "üé∞" and (update.message.dice.value == 22 or update.message.dice.value == 43)):
        await update.message.reply_chat_action("typing")
        print(datetime.now().strftime("%d.%m.%Y %X"), "—Ö–≤–∞–ª—é –ª—É–¥–æ–º–∞–Ω–∞")
        await update.message.reply_text("üëè")
    elif (update.message.dice.emoji == "üé∞" and update.message.dice.value == 1):
        await update.message.reply_chat_action("upload_document")
        print(datetime.now().strftime("%d.%m.%Y %X"), "–ø–æ—Ü–µ–ª—É–π –º–æ—é –∑–∞–ª—É–ø—É")
        await update.message.reply_animation("CgACAgIAAxkBAAI8E2OXRubJFHJtLWBlqVB6X_XtzMDqAAIwHAACGGG5S0wHqqoAAW9qSysE")
    elif (update.message.dice.emoji == "üé∞" and update.message.dice.value == 64):
        await update.message.reply_chat_action("typing")
        print(datetime.now().strftime("%d.%m.%Y %X"), "–¥–∂–µ–∫–ø–æ—Ç")
        await update.message.reply_markdown_v2("–µ–±–∞—Ç—å\! –¥–∂–µ–∫–ø–æ—Ç\! –¥–∂–µ–∫–ø–æ—Ç\! ||—Ö—É–π —Ç–µ –≤ —Ä–æ—Ç||")

async def cat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_chat_action('upload_photo')
    print(datetime.now().strftime("%d.%m.%Y %X"), "–∫–∏—Ü–∞")
    r = requests.get("https://api.thecatapi.com/v1/images/search")
    j = r.json()
    —Å—Å—ã–ª–∫–∞ = j[0]["url"]
    #print(—Å—Å—ã–ª–∫–∞)
    if —Å—Å—ã–ª–∫–∞.endswith("gif"): await update.message.reply_animation(—Å—Å—ã–ª–∫–∞)
    elif —Å—Å—ã–ª–∫–∞.endswith(("jpg", "png", "jpeg")): await update.message.reply_photo(—Å—Å—ã–ª–∫–∞)
    else: await update.message.reply_text(j[0]["url"])

async def dog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_chat_action('upload_photo')
    print(datetime.now().strftime("%d.%m.%Y %X"), "–ø–µ—Å—Ü")
    r = requests.get("https://api.thedogapi.com/v1/images/search")
    j = r.json()
    —Å—Å—ã–ª–∫–∞ = j[0]["url"]
    #print(—Å—Å—ã–ª–∫–∞)
    if —Å—Å—ã–ª–∫–∞.endswith("gif"): await update.message.reply_animation(—Å—Å—ã–ª–∫–∞)
    elif —Å—Å—ã–ª–∫–∞.endswith(("jpg", "png", "jpeg")): await update.message.reply_photo(—Å—Å—ã–ª–∫–∞)
    else: await update.message.reply_text(j[0]["url"])

async def neko(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_chat_action('upload_photo')
    print(datetime.now().strftime("%d.%m.%Y %X"), "–∫–æ—à–∫–æ–¥–µ–≤–∫–∞")
    r = requests.get("https://nekos.best/api/v2/neko")
    j = r.json()
    —Å—Å—ã–ª–∫–∞ = j["results"][0]["url"]
    #print(—Å—Å—ã–ª–∫–∞)
    if —Å—Å—ã–ª–∫–∞.endswith("gif"): await update.message.reply_animation(—Å—Å—ã–ª–∫–∞)
    elif —Å—Å—ã–ª–∫–∞.endswith(("jpg", "png", "jpeg")): await update.message.reply_photo(—Å—Å—ã–ª–∫–∞)
    else: await update.message.reply_text(j["results"][0]["url"])

async def duck(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_chat_action('upload_photo')
    print(datetime.now().strftime("%d.%m.%Y %X"), "—É—Ç–∫–∞")
    r = requests.get("https://random-d.uk/api/v2/random")
    j = r.json()
    —Å—Å—ã–ª–∫–∞ = j["url"]
    #print(—Å—Å—ã–ª–∫–∞)
    if —Å—Å—ã–ª–∫–∞.endswith("gif"): await update.message.reply_animation(—Å—Å—ã–ª–∫–∞)
    elif —Å—Å—ã–ª–∫–∞.endswith(("jpg", "png", "jpeg")): await update.message.reply_photo(—Å—Å—ã–ª–∫–∞)
    else: await update.message.reply_text(j["url"])

async def –º–∞–Ω–¥–∞—Ä–∏–Ω–∫–∞(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_chat_action('record_video_note')
    print(datetime.now().strftime("%d.%m.%Y %X"), "–º–∞–Ω–¥–∞—Ä–∏–Ω–∫–∞")
    await update.message.reply_text("""üåïüåïüåïüåïüåïüåïüåïüåï
üåïüåïüåïüåïüåïüé©üåïüåï
üåïüåïüåïüåïüåòüåëüåíüåï
üåïüåïüåïüåòüåëüåëüåëüåì
üåïüåïüåñüåëüëÅüëÉüèªüëÅüåì     
üåïüåïüåóüåëüåëüëÑüåëüåî
üåïüåïüåòüåëüåëüåëüåíüåï üí¨–ë–£–î–ï–®–¨
üåïüåïüåòüëâüèªüçäüëàüèªüåìüåï       –ú–ê–ù–î–ê–†–ò–ù–ö–£?
üåïüåïüåòüåëüåëüåëüåîüåï
üåïüåïüåòüåîüåòüåëüåïüåï
üåïüåïüåóüåîüåóüåíüåïüåï
üåïüåïüåóüåîüåóüåìüåïüåï
üåïüåïüåòüåîüåóüåìüåïüåï
üåïüåïüë†üåïüåïüë†üåïüåï""")

''' async def –±–∞–ª–∞–±–æ–±–∞(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_chat_action('typing')
    print(datetime.now().strftime("%d.%m.%Y %X"), "–±–∞–ª–∞–±–æ–±–ª—é")
    if ((update.message is not None) and (hasattr(update.message, 'text'))):
        –∏–∏ = True
        if (update.message.reply_to_message is not None):
            mid = update.message.reply_to_message
            if mid.text is not None: msgtxt = mid.text
            elif mid.caption is not None: msgtxt = mid.caption
            else: 
                –∏–∏ = False
                await update.message.reply_text("–±–∞–ª–∞–±–æ–±–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç. –∑–¥–µ—Å—å —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç. –∫–∞–∫ —è —Ç—É–¥–∞ –ø–µ—Ä–µ–¥–∞–º –ø—É—Å—Ç–æ—Ç—É?")
        else:
            msgtxt = update.message.text
    if –∏–∏:
        if "/b@kookoomyawka_bot" in msgtxt: msgtxt=msgtxt.removeprefix("/b@kookoomyawka_bot")
        else: msgtxt=msgtxt.removeprefix("/b")
        headers = {
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:107.0) Gecko/20100101 Firefox/107.0',
        'Accept': '*/*',
        'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
        'Referer': 'https://yandex.com',
        'Content-Type': 'application/json',
        'Origin': 'https://yandex.com',
        'Connection': 'keep-alive',
        'Sec-Fetch-Dest': 'empty',
        'Sec-Fetch-Mode': 'cors',
        'Sec-Fetch-Site': 'cross-site',
        }
        json_data = {'query':f'{msgtxt}', 'intro': 0, 'filter': 0}
        if len(msgtxt)>0:
            r = requests.post('https://zeapi.yandex.net/lab/api/yalm/text3', headers=headers, json=json_data, verify=False,)
            j = r.json()
            if j['bad_query']==1: await update.message.reply_text('–ë–∞–ª–∞–±–æ–±–∞ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å—Ç—Ä—ã–µ —Ç–µ–º—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ –ø–æ–ª–∏—Ç–∏–∫—É –∏–ª–∏ —Ä–µ–ª–∏–≥–∏—é. –õ—é–¥–∏ –º–æ–≥—É—Ç —Å–ª–∏—à–∫–æ–º —Å–µ—Ä—å—ë–∑–Ω–æ –æ—Ç–Ω–µ—Å—Ç–∏—Å—å –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–∞–º. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –∑–∞–¥–∞—ë—Ç –æ–¥–Ω—É –∏–∑ –æ—Å—Ç—Ä—ã—Ö —Ç–µ–º, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç—å, –æ–±—É—á–µ–Ω–Ω–∞—è –Ω–∞ –æ—Ü–µ–Ω–∫–∞—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö –ª—é–¥–µ–π. –ù–æ –æ–Ω–∞ –º–æ–∂–µ—Ç –ø–µ—Ä–µ—Å—Ç–∞—Ä–∞—Ç—å—Å—è –∏–ª–∏, –Ω–∞–æ–±–æ—Ä–æ—Ç, —á—Ç–æ-—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.')
            else: await update.message.reply_text(j['text'])
        else: await update.message.reply_text('–ø–æ—Å–ª–µ /b –Ω–∞–¥–æ –±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –∫–∞–∫–æ–π-—Ç–æ —Ç–µ–∫—Å—Ç.') '''

async def remember_kb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(datetime.now().strftime("%d.%m.%Y %X"), "–Ω–∞–ø–æ–º–∏–Ω–∞—é")
    keyboard = [
        [
            InlineKeyboardButton("–í—ã–∫–ª. PC", callback_data="shutdown"),
            InlineKeyboardButton("–í–∫–ª. PC", callback_data="wake_pc"),
            InlineKeyboardButton("–ö—Ç–æ –≤ —Å–µ—Ç–∏?", callback_data="–∫—Ç–æ_–≤_—Å–µ—Ç–∏"),
        ],
        [
            InlineKeyboardButton("–°–≤–µ—Ç", callback_data="–≤–∫–ª_—ç–∫—Ä–∞–Ω"),
            InlineKeyboardButton("–°–∫—Ä–∏–Ω", callback_data="screen"),
            InlineKeyboardButton("–§–æ—Ç–æ", callback_data="photo"),
        ],
        [
            InlineKeyboardButton("IP-–∞–¥—Ä–µ—Å", callback_data="ip"),
            InlineKeyboardButton("–ê–ø—Ç–∞–π–º", callback_data="uptime"),
            InlineKeyboardButton("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", callback_data="temp"),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("/shutdownrainbow   /wakepc   /light   /screen   /photo   /ip   /uptime   /temp   /whosthere", reply_markup=reply_markup)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data=='shutdown': await shutdown(update, context)
    elif query.data=='wake_rainbow': await wake_pc(update, context)
    elif query.data=='–∫—Ç–æ_–≤_—Å–µ—Ç–∏': await –∫—Ç–æ_–≤_—Å–µ—Ç–∏(update, context)
    elif query.data=='–≤–∫–ª_—ç–∫—Ä–∞–Ω': await –≤–∫–ª_—ç–∫—Ä–∞–Ω(update, context)
    elif query.data=='screen': await screen(update, context)
    elif query.data=='photo': await photo(update, context)
    elif query.data=='ip': await pc_ip(update, context)
    elif query.data=='uptime': await pc_uptime(update, context)
    elif query.data=='temp': await pc_temp(update, context)

async def –±–∞—Ö–Ω–µ–º(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(datetime.now().strftime("%d.%m.%Y %X"), "–±–∞—Ö–Ω–µ–º")
    await update.message.reply_chat_action("typing")
    await update.message.reply_text("–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±–∞—Ö–Ω–µ–º! –∏ –Ω–µ —Ä–∞–∑! –≤–µ—Å—å –º–∏—Ä –≤ —Ç—Ä—É—Ö—É!.. –Ω–æ –ø–æ—Ç–æ–º.")

async def button_for_roulette(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    ammo = int(query.data)
    armed = set()
    num = random.randint(1, 6)
    if query.data=="0": 
        print(datetime.now().strftime("%d.%m.%Y %X"), "–∑–∞—Ä—è–¥–∏—Ç—å –∑–∞–±—ã–ª")
        await query.edit_message_caption(caption="–¢—ã —Ä–µ—à–∏–ª –ø–æ–∏–≥—Ä–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É —Å –Ω—É–ª—ë–º –ø–∞—Ç—Ä–æ–Ω–æ–≤ –≤ –±–∞—Ä–∞–±–∞–Ω–µ. –¢—ã –∏—Ö, —á—Ç–æ, –∑–∞–±—ã–ª?")
    elif query.data=="6":
        print(datetime.now().strftime("%d.%m.%Y %X"), "6 –∏–∑ 6")
        await query.edit_message_caption(caption="—à–µ—Å—Ç—å –∏–∑ —à–µ—Å—Ç–∏? –±–æ–ª—å—à–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–æ–ø—ã—Ç–∫—É —Å–∞–º–æ–≤—ã–ø–∏–ª–∞, —á–µ–º –Ω–∞ –∏–≥—Ä—ã. –æ—á–µ–≤–∏–¥–Ω–æ, —á—Ç–æ —Å–∫—É—Ä—Ç–∫–æ–±–µ–π–Ω–∏–ª—Å—è.")
    else:
        print(datetime.now().strftime("%d.%m.%Y %X"), "–∑–∞—Ä—è–∂–µ–Ω–æ", query.data, "–ø–∞—Ç—Ä–æ–Ω–æ–≤")
        while (len(armed)<ammo):
            armed.add(random.randint(1,6))
        print(datetime.now().strftime("%d.%m.%Y %X"), "–ø–∞—Ç—Ä–æ–Ω—ã –≤ –∫–∞–º–æ—Ä–∞—Ö ", armed)
        if (num in armed):
            print(datetime.now().strftime("%d.%m.%Y %X"), "rip")
            capstr = "–ø–∞—Ç—Ä–æ–Ω—ã –≤ –∫–∞–º–æ—Ä–∞—Ö ‚Ññ " + str(armed) + ". \n–±–æ—ë–∫ —É–¥–∞—Ä–∏–ª –ø–æ –∫–∞–º–æ—Ä–µ ‚Ññ" + str(num) + ", –Ω–æ –æ–Ω–∞ –±—ã–ª–∞ –Ω–µ –ø—É—Å—Ç–∞. —Ç—ã —Å–∫—É—Ä—Ç–∫–æ–±–µ–π–Ω–∏–ª—Å—è."
            await query.edit_message_caption(caption=capstr)
        else:
            print(datetime.now().strftime("%d.%m.%Y %X"), "–∂–∏–≤")
            capstr = "–ø–∞—Ç—Ä–æ–Ω—ã –≤ –∫–∞–º–æ—Ä–∞—Ö: " + str(armed) + ". \n–±–æ—ë–∫ —É–¥–∞—Ä–∏–ª –ø–æ –∫–∞–º–æ—Ä–µ ‚Ññ" + str(num) + ", –∞ –æ–Ω–∞ –±—ã–ª–∞ –ø—É—Å—Ç–∞. –≤—ã—Å—Ç—Ä–µ–ª–∞ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ."
            await query.edit_message_caption(caption=capstr)

async def roulette(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(datetime.now().strftime("%d.%m.%Y %X"), "–≤—Ä–∞—â–∞–π—Ç–µ –±–∞—Ä–∞–±–∞–Ω!")
    await update.message.reply_chat_action("typing")
    keyboard = [
        [
            InlineKeyboardButton("0", callback_data=0),
            InlineKeyboardButton("1", callback_data=1),
            InlineKeyboardButton("2", callback_data=2),
            InlineKeyboardButton("3", callback_data=3),
            InlineKeyboardButton("4", callback_data=4),
            InlineKeyboardButton("5", callback_data=5),
            InlineKeyboardButton("6", callback_data=6),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_animation("CgACAgIAAxkBAAIKZmK_MikcDAAB3BCAfodCbbDC_Yo-YgACohwAAqmu-EnUGhAtgOu5uCkE", caption="–≤—Ä–∞—â–∞–π—Ç–µ –±–∞—Ä–∞–±–∞–Ω!", reply_markup=reply_markup)

async def —à–∞—Ä_–≤–æ—Å—å–º—ë—Ä–∫–∞(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(datetime.now().strftime("%d.%m.%Y %X"), "üé±")
    await update.message.reply_chat_action("record_video_note")
    –æ—Ç–≤–µ—Ç = random.choice(['–±–µ—Å—Å–ø–æ—Ä–Ω–æ', '–ø—Ä–µ–¥—Ä–µ—à–µ–Ω–æ', '–Ω–∏–∫–∞–∫–∏—Ö —Å–æ–º–Ω–µ–Ω–∏–π', '–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ ‚Äî –¥–∞', '–∏–Ω—Ñ–∞ —Å–æ—Ç–∫–∞', '—è—â–∏—Ç–∞—é, —à—Ç–æ –¥–∞', '–≤–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ', '—ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ', '–∑–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç ‚Äî –¥–∞', '–∞–≥–∞—Å—å', '–ø–æ–∫–∞ –Ω–µ —è—Å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞', '—Å–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ', '–Ω–µ —Å–µ–π—á–∞—Å', '—Å–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å', '—Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –∏ —Å–ø—Ä–æ—Å–∏ –æ–ø—è—Ç—å', '–¥–∞–∂–µ –Ω–µ –¥—É–º–∞–π', '–≤–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ', '–ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ', '–Ω–µ –Ω–∞–¥–µ–π—Å—è –Ω–∞ —ç—Ç–æ', '–∑–∞–±—É–¥—å –æ–± —ç—Ç–æ–º'])
    await update.message.reply_text('–æ—Ç–≤–µ—Ç –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å: ' + –æ—Ç–≤–µ—Ç)

async def stickers_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if ((update.message.reply_to_message is not None) and (hasattr(update.message, 'from_user'))):
            forme = update.message.reply_to_message.from_user.id == 5441337742
            if forme:
                if update.message.sticker.file_unique_id=="AgADZQEAAnY3dj8" or update.message.sticker.file_unique_id=="AgAD2CsAAjTrKUs":
                    await update.message.reply_chat_action("choose_sticker")
                    print(datetime.now().strftime("%d.%m.%Y %X"), "üòé")
                    await update.message.reply_sticker("CAACAgIAAxkBAAJcA2PmxjoWJjLvWPUH0Z-hBlPWhQmaAALYKwACNOspS9LSWkSb6FCyLgQ")
                else:
                    await update.message.reply_chat_action("choose_sticker")
                    num = random.randint(0,1)
                    if (num==1):
                        print(datetime.now().strftime("%d.%m.%Y %X"), "–æ—Ç–≤–µ—á–∞—é —Å—Ç–∏–∫–µ—Ä–æ–º –Ω–∞ —Å—Ç–∏–∫–µ—Ä")
                        —Å—Ç–∏–∫–µ—Ä = random.choice(["CAACAgIAAxkBAAJGvWOrJgJU-BkdAbzGd06nJvEr1jCEAAIRJQAC6fRgSYPaxu4saJY8LAQ", "CAACAgIAAxkBAAJGvmOrJgauAeGFP9XvcaP_E25_LkdWAAISJQAC6fRgSe5o5ZlxmkZ5LAQ", "CAACAgIAAxkBAAJGv2OrJgs-FWbVXgURhsFUpq_aAbCDAAITJQAC6fRgSRfaOkfe0T0jLAQ"])
                        await update.message.reply_sticker(—Å—Ç–∏–∫–µ—Ä)
                    else:
                        print(datetime.now().strftime("%d.%m.%Y %X"), "—Ä–µ–ø–ª–∞–π –∏–∑ –±–∞–∑—ã –Ω–∞ —Å—Ç–∏–∫–µ—Ä")
                        await –∏–∑_–±–∞–∑—ã(update, context)

async def –ø—Ä–∞–∑–¥–Ω–∏–∫–∏(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_chat_action('typing')
    print(datetime.now().strftime("%d.%m.%Y %X"), "–ø—Ä–∞–∑–¥–Ω–∏–∫–∏")
    r = requests.get("https://www.calend.ru/img/export/informer_new_3.js")
    resp = r.text
    resp = resp[resp.find("><a")+1:resp.rfind("><")+1]
    resp = resp.replace("target=_blank ", "")
    resp = resp.replace(" class=\"+calendru_mc+\"", "")
    resp = resp.replace(" class=\"+calendru_c+\"", "")
    resp = resp.replace("document.write(\"<div", "")
    resp = resp.replace("class=\"+calendru_c_all+\">\");", "")
    resp = resp.replace("</div>\");", "")
    resp = resp.replace("if(calendru_i_f) >", "")
    while "<span" in resp:
        resp = resp[:resp.find("<span")] + resp[resp.find("/span>")+5:]
    resp = resp.replace("><br>", "")
    resp = resp.replace("if(calendru_show_names) >> ", "–ò–º–µ–Ω–∏–Ω—ã:  ")
    resp = resp.replace(" class=\"+calendru_c_names+\" ", "")
    resp = resp.replace("><a", "<a")
    resp = resp.replace("a>>", "a>")
    resp = resp.replace("  >", ">")
    resp = resp.replace(" >", ">")
    resp = resp.replace("/>", "/\">")
    resp = resp.replace("href=", "href=\"")
    resp = resp.replace("\n\n", "\n")
    msgtxt = "–ü—Ä–∞–∑–¥–Ω–∏–∫–∏ —Å–µ–≥–æ–¥–Ω—è, "
    await update.message.reply_html(msgtxt+resp)

'''async def chatgpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(datetime.now().strftime("%d.%m.%Y %X"), "chatgpt")
    await update.message.reply_chat_action('typing')
    –∏–∏ = True
    openai.api_key = "op-AIapiK3y"
    if (update.message.reply_to_message is not None):
        mid = update.message.reply_to_message
        if mid.text is not None: msgtxt = mid.text
        elif mid.caption is not None: msgtxt = mid.caption
        else: 
            –∏–∏ = False
            await update.message.reply_text("–≤ ChatGPT –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç. –∑–¥–µ—Å—å —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç. –∫–∞–∫ —è —Ç—É–¥–∞ –ø–µ—Ä–µ–¥–∞–º –ø—É—Å—Ç–æ—Ç—É?")
    else:
        msgtxt = update.message.text
    if –∏–∏:
        await update.message.reply_chat_action('typing')
        userid = "user" + str(update.message.from_user.id)
        if "/c@kookoomyawka_bot" in msgtxt: msgtxt=msgtxt.removeprefix("/c@kookoomyawka_bot")
        else: msgtxt=msgtxt.removeprefix("/c")
        if len(msgtxt)>0:
            await update.message.reply_chat_action('typing')
            completion = openai.ChatCompletion.create(model="gpt-4", messages=[{"role": "user", "content":f'{userid} said: {msgtxt}'}])
            await update.message.reply_text(completion.choices[0].message.content)
        else: await update.message.reply_text('–ø–æ—Å–ª–µ /c –Ω–∞–¥–æ –±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –∫–∞–∫–æ–π-—Ç–æ —Ç–µ–∫—Å—Ç.')
    print(datetime.now().strftime("%d.%m.%Y %X") + " " + str(update.message.chat.id) +": " + msgtxt, file=open('/media/db/gpt.txt', 'a'))  '''

async def getf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    –Ω–∞–¥–æ–ª–∏ = False
    print(datetime.now().strftime("%d.%m.%Y %X"), "–¥–∞—é file_id")
    await update.message.reply_chat_action('find_location')
    if update.message.reply_to_message is not None:
        mid = update.message.reply_to_message
        if mid.sticker:
            msgtxt = mid.sticker.file_id
            –Ω–∞–¥–æ–ª–∏ = True
        elif mid.animation:
            msgtxt = mid.animation.file_id
            –Ω–∞–¥–æ–ª–∏ = True
        elif mid.document:
            msgtxt = mid.document.file_id
            –Ω–∞–¥–æ–ª–∏ = True
        elif mid.video:
            msgtxt = mid.video.file_id
            –Ω–∞–¥–æ–ª–∏ = True
        elif mid.video_note:
            msgtxt = mid.video_note.file_id
            –Ω–∞–¥–æ–ª–∏ = True
        elif mid.voice:
            msgtxt = mid.voice.file_id
            –Ω–∞–¥–æ–ª–∏ = True
        elif mid.audio:
            msgtxt = mid.audio.file_id
            –Ω–∞–¥–æ–ª–∏ = True
        else: –Ω–∞–¥–æ–ª–∏ = False
    if –Ω–∞–¥–æ–ª–∏: await update.message.reply_html(f'<code>{msgtxt}</code>')
    else: await update.message.reply_html('—Ç—ã –¥–µ–ª–∞–µ—à—å —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ')

'''async def catboys(update: Update, context: ContextTypes.DEFAULT_TYPE): #–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –∏–±–æ –¥–æ–º–µ–Ω —Å—Ç—É—Ö
    await update.message.reply_chat_action('upload_photo')
    print(datetime.now().strftime("%d.%m.%Y %X"), "catboy")
    r = requests.get("https://api.catboys.com/img")
    j = r.json()
    —Å—Å—ã–ª–∫–∞ = j["url"]
    #print(—Å—Å—ã–ª–∫–∞)
    if —Å—Å—ã–ª–∫–∞.endswith("gif"): await update.message.reply_animation(—Å—Å—ã–ª–∫–∞)
    elif —Å—Å—ã–ª–∫–∞.endswith(("jpg", "png", "jpeg")): await update.message.reply_photo(—Å—Å—ã–ª–∫–∞)
    else: await update.message.reply_text(j["url"])  '''

async def –µ–ª–¥–∞(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(datetime.now().strftime("%d.%m.%Y %X"), "–µ–ª–¥–∞")
    await update.message.reply_chat_action('typing')
    await update.message.reply_html('–¥–∞ —É–∂ –ø–æ–ª—É—á—à–µ —Ç–≤–æ–µ–π, –±–µ—Å—Ö—É–µ–µ —Å–æ–∑–¥–∞–Ω–∏–µ')

async def d20(update: Update, context: ContextTypes.DEFAULT_TYPE):
    random.seed()
    print(datetime.now().strftime("%d.%m.%Y %X"), "d20")
    await update.message.reply_text('d20: ' + str(random.randint(1, 20)))

async def d4(update: Update, context: ContextTypes.DEFAULT_TYPE):
    random.seed()
    print(datetime.now().strftime("%d.%m.%Y %X"), "d4")
    await update.message.reply_text('d4: ' + str(random.randint(1, 4)))

async def d6(update: Update, context: ContextTypes.DEFAULT_TYPE):
    random.seed()
    print(datetime.now().strftime("%d.%m.%Y %X"), "d6")
    await update.message.reply_text('d6: ' + str(random.randint(1, 6)))

async def d8(update: Update, context: ContextTypes.DEFAULT_TYPE):
    random.seed()
    print(datetime.now().strftime("%d.%m.%Y %X"), "d8")
    await update.message.reply_text('d8: ' + str(random.randint(1, 8)))

async def d10(update: Update, context: ContextTypes.DEFAULT_TYPE):
    random.seed()
    print(datetime.now().strftime("%d.%m.%Y %X"), "d10")
    await update.message.reply_text('d10: ' + str(random.randint(1, 10)))

async def d12(update: Update, context: ContextTypes.DEFAULT_TYPE):
    random.seed()
    print(datetime.now().strftime("%d.%m.%Y %X"), "d12")
    await update.message.reply_text('d12: ' + str(random.randint(1, 12)))

async def d100(update: Update, context: ContextTypes.DEFAULT_TYPE):
    random.seed()
    print(datetime.now().strftime("%d.%m.%Y %X"), "d100")
    await update.message.reply_text('d100: ' + str(random.randint(1, 100)))

async def d10x2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    random.seed()
    print(datetime.now().strftime("%d.%m.%Y %X"), "d10x2")
    await update.message.reply_html('d10x2: ' + str(random.randint(0, 9)*10 + random.randint(0, 9)) + '\n <i>* 00 =  100 </i>')

async def boobs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    random.seed()
    print(datetime.now().strftime("%d.%m.%Y %X"), "booba")
    r = requests.get('http://api.oboobs.ru/boobs')
    j = r.json()
    id = j[0]["id"]
    number = str(random.randint(1, id)).zfill(5)
    link = 'http://media.oboobs.ru/boobs/' + number + '.jpg'
    await update.message.reply_photo(link)

async def torrent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    –Ω–∞–¥–æ–ª–∏ = False
    print(datetime.now().strftime("%d.%m.%Y %X"), "–ø–æ–ª—É—á–∞—é —Ç–æ—Ä—Ä–µ–Ω—Ç-—Ñ–∞–π–ª")
    await update.message.reply_chat_action('find_location')
    if update.message.reply_to_message is not None:
        mid = update.message.reply_to_message
        if mid.document:
            filename = mid.document.file_name
            –Ω–∞–¥–æ–ª–∏ = True
            tfilepath = '/!tfiles/' + filename
            tfile = await mid.document.get_file()
            await tfile.download_to_drive(tfilepath)
    if –Ω–∞–¥–æ–ª–∏: await update.message.reply_html('—Ç–æ—Ä—Ä–µ–Ω—Ç-—Ç–æ —è –∑–∞–∫–∏–Ω—É–ª, –∞ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∑–∞–≤–∏—Å–∏—Ç –Ω–µ –æ—Ç –º–µ–Ω—è')
    else: await update.message.reply_html('—Ç—ã –¥–µ–ª–∞–µ—à—å —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ')

async def good_morning_old():
    random.seed()
    rbo = requests.get('http://api.oboobs.ru/boobs')
    jbo = rbo.json()
    idbo = jbo[0]["id"]
    number = str(random.randint(1, idbo)).zfill(5)
    linkbo = 'http://media.oboobs.ru/boobs/' + number + '.jpg'
    testbo = requests.get(linkbo)
    while testbo.status_code != 200:
        random.seed()
        number = str(random.randint(1, idbo)).zfill(5)
        linkbo = 'http://media.oboobs.ru/boobs/' + number + '.jpg'
        testbo = requests.get(linkbo)
    random.seed()
    rbu = requests.get('http://api.obutts.ru/butts')
    jbu = rbu.json()
    idbu = jbu[0]["id"]
    number = str(random.randint(1, idbu)).zfill(5)
    linkbu = 'http://media.obutts.ru/butts/' + number + '.jpg'
    testbu = requests.get(linkbu)
    while testbu.status_code != 200:
        random.seed()
        number = str(random.randint(1, idbu)).zfill(5)
        linkbu = 'http://media.obutts.ru/butts/' + number + '.jpg'
        testbu = requests.get(linkbu)
    await Bot('L0NG:B07-70KEN').send_media_group(chat_id=-needed_chat_id, caption='–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –º–∏–ª–æ—Å—Ç–∏–≤—ã–µ –≥–æ—Å–ø–æ–¥–∞!', media=[InputMediaPhoto(media=linkbo), InputMediaPhoto(media=linkbu)])

async def butt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    random.seed()
    print(datetime.now().strftime("%d.%m.%Y %X"), "butt")
    r = requests.get('http://api.obutts.ru/butts')
    j = r.json()
    id = j[0]["id"]
    number = str(random.randint(1, id)).zfill(5)
    link = 'http://media.obutts.ru/butts/' + number + '.jpg'
    await update.message.reply_photo(link)

async def donate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(datetime.now().strftime("%d.%m.%Y %X"), "–∑–∞–ø—Ä–æ—Å–∏–ª–∏ –∏–Ω—Ñ—É –ø–æ –¥–æ–Ω–∞—Ç–∞–º")
    await update.message.reply_html("–î–æ–Ω–∞—Ç—ã —á–µ—Ä–µ–∑\nTON: <code>UQCI23tiAAPjI7m8BpiVBnpaelPrtsdPMk4xwqhhOzX6nN_7</code>\nUSDT: <code>TJEDJvGff7JY4HV6mr8qb8fH8zAF1xaXfC</code>\nBTC: <code>1LkBaQUg3ZDfGknvkQzH6CHmV5VHEe7prd</code>")

async def —Ç—Ä–∏—Å—Ç–∞(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(datetime.now().strftime("%d.%m.%Y %X"), "–ø—Ä–µ–¥–ª–∞–≥–∞—é –ø–æ—Å–æ—Å–∞—Ç—å –∑–∞ 300")
    await update.message.reply_chat_action('typing')
    –æ—Ç–≤–µ—Ç = "–æ—Ç—Å–æ—Å–∏ —É "
    –≤—ã–±–æ—Ä = random.choice(['—Ç—Ä–∞–∫—Ç–æ—Ä–∏—Å—Ç–∞', '–º–æ—Ç–æ—Ä–∏—Å—Ç–∞', '—Ç—Ä—É–±–æ—á–∏—Å—Ç–∞', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞', '–≥–æ–≤–Ω–æ—á–∏—Å—Ç–∞', '–±–∞—è–Ω–∏—Å—Ç–∞', '–ø–∏—Ç–æ–Ω–∏—Å—Ç–∞', '–∞–ª—å–ø–∏–Ω–∏—Å—Ç–∞', '–≥–∏—Ç–∞—Ä–∏—Å—Ç–∞', '—Ö–æ–∫–∫–µ–∏—Å—Ç–∞', '–º–∞—Å—Å–∞–∂–∏—Å—Ç–∞', '—Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç–∞', '—Ñ–µ—Ç–∏—à–∏—Å—Ç–∞', '–ª–∏—Ü–µ–∏—Å—Ç–∞', '–≥—É–º–∞–Ω–∏—Å—Ç–∞', '–æ–Ω–∞–Ω–∏—Å—Ç–∞', '–º–∏—Ç–æ–ª–∏–∑–¥–∞', '–∫–æ–º–º—É–Ω–∏—Å—Ç–∞', '–≥–µ–¥–æ–Ω–∏—Å—Ç–∞', '–º–æ—Ä–∞–ª–∏—Å—Ç–∞', '—Ç–µ–Ω–Ω–∏—Å–∏—Å—Ç–∞', '—ç–≥–æ–∏—Å—Ç–∞', '–≤–æ–∫–∞–ª–∏—Å—Ç–∞', '–æ–ø—Ç–∏–º–∏—Å—Ç–∞', '–∫–∞—Ä–∞—Ç–∏—Å—Ç–∞', '—Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç–∞', '—à–∞—Ö–º–∞—Ç–∏—Å—Ç–∞', '–≥–∞—Ä–º–æ–Ω–∏—Å—Ç–∞', '–±–µ–π—Å–±–æ–ª–∏—Å—Ç–∞', '–ø–µ–π–∑–∞–∂–∏—Å—Ç–∞', '–∞–Ω–∞—Ä—Ö–∏—Å—Ç–∞', '–≤—Å–µ—Ö –≤ —ç—Ç–æ–º —á–∞—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞'])
    await update.message.reply_text(–æ—Ç–≤–µ—Ç+–≤—ã–±–æ—Ä)

async def novichok(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.id == -needed_chat_id:
        random.seed()
        what = random.randint(0,1)
        if what:
            anim = random.choice(['CgACAgQAAxkBAAEB5VNlmH44Gmq1bYyzi8wQmpaDy0WKYgACCRAAAofUCFOudyt-U-MmlDQE','CgACAgIAAxkBAAEB5VllmH7gOW0SzMDOlbnApgRqK3sIuAACzjoAAnDNuEjx2LWKxjNa8DQE','CgACAgQAAxkBAAEB5VxlmH-HSW1gWgTxhxSdcG1xmJ4xQgACCxAAAofUCFPvB_tHEfJzSDQE','CgACAgQAAxkBAAEB5V5lmH-H9BB2IpRoqxiPuTs6j9FshAACBhAAAofUCFO9pJTDXgkBHzQE','CgACAgIAAxkBAAEB5V1lmH-HebARo3pzf0KkYKK6s5izfgACPz4AAnemQUiHYhkQhujEOjQE'])
            await update.message.reply_animation(anim)
            print(datetime.now().strftime("%d.%m.%Y %X"), "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –Ω–æ–≤–∏—á–∫–∞ —É xxxx –≥–∏—Ñ–∫–æ–π")
        else:
            await update.message.reply_photo("AgACAgIAAxkBAAEB5YplmImTbzOIo0oF4wfyIbnq5sAySgACy9ExG5ipsUiP9XZGBeOYcAEAAwIAA3MAAzQE")
            print(datetime.now().strftime("%d.%m.%Y %X"), "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –Ω–æ–≤–∏—á–∫–∞ —É xxxx –ø–∏–∫—á–µ–π")
    elif update.message.chat.id == -1001640866252:
        unwanted = update.message.from_user.id
        –¥–æ–∫–æ–ª–µ = int(t.time()) + 60
        await Bot('L0NG:B07-70KEN').ban_chat_member(-1001640866252, unwanted, –¥–æ–∫–æ–ª–µ)

async def —É–¥–æ–ª–∏(–∫–∞–≤–æ, –≥–¥–µ):
    await Bot('L0NG:B07-70KEN').delete_message(–≥–¥–µ, –∫–∞–≤–æ)
    print(datetime.now().strftime("%d.%m.%Y %X"), "—á–∏—Å—Ç–∏—é –∑–∞ —Å–æ–±–æ–π")

async def ban_roulette(update: Update, context: ContextTypes.DEFAULT_TYPE):
    –∫–∞–≤–æ = update.message.from_user.id
    –¥–æ–∫–æ–ª–µ = int(t.time()) + 60
    –≥–¥–µ = update.message.chat.id
    print(datetime.now().strftime("%d.%m.%Y %X"), "—Å–∞–º–æ–±–∞–Ω-—Ä—É–ª–µ—Ç–∫–∞")
    random.seed()
    armed = random.randint(1,6)
    random.seed()
    num = random.randint(1,6)
    if (num == armed):
        try: await Bot('L0NG:B07-70KEN').ban_chat_member(–≥–¥–µ, –∫–∞–≤–æ, –¥–æ–∫–æ–ª–µ)
        except BadRequest as b:
            #print(b)
            if "Chat_admin_required" or "Not enough" in b.message: 
                await update.message.reply_text("—è –±—ã —Ç–µ–±—è –∑–∞–±–∞–Ω–∏–ª, –±—É–¥—å —É –º–µ–Ω—è —Ç–∞–∫–∏–µ –ø—Ä–∞–≤–∞.")
                print(datetime.now().strftime("%d.%m.%Y %X"), "–Ω–µ –º–æ–≥—É –∑–∞–±–∞–Ω–∏—Ç—å")
        else:
            print(datetime.now().strftime("%d.%m.%Y %X"), "—Å–∞–º–æ–±–∞–Ω")
            await update.message.reply_text("UWBFTP")
    else:
        print(datetime.now().strftime("%d.%m.%Y %X"), "–∂–∏–≤")
        await update.message.reply_text("–ø–æ–≤–µ–∑–ª–æ-–ø–æ–≤–µ–∑–ª–æ")

async def me(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(datetime.now().strftime("%d.%m.%Y %X"), "–æ–ø–∏—Å—ã–≤–∞—é –¥–µ–π—Å—Ç–≤–∏–µ")
    msgtxt = update.message.text
    who = update.effective_user
    if msgtxt == "/me" or msgtxt == "/me@kookoomyawka_bot": 
        try: await Bot('L0NG:B07-70KEN').delete_message(update.effective_chat.id, update.effective_message.message_id)
        except BadRequest as b:
            if "can't" in b.message:
                await update.message.reply_html(rf"{who.mention_html()} –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è /me")
        else: await Bot('L0NG:B07-70KEN').send_message(update.effective_chat.id, parse_mode="HTML", text=rf"*{who.mention_html()} –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è /me")
    elif ("/me@kookoomyawka_bot" in msgtxt): msgtxt=msgtxt.removeprefix("/me@kookoomyawka_bot ")
    else: msgtxt=msgtxt.removeprefix("/me ")
    try: await Bot('L0NG:B07-70KEN').delete_message(update.effective_chat.id, update.effective_message.message_id)
    except BadRequest as b:
        #print (b)
        if "can't" in b.message:
            await update.message.reply_html(rf"–≠—Ç–æ, –∫–æ–Ω–µ—á–Ω–æ, –∏ —Ç–∞–∫ –≤–∏–¥–Ω–æ, –Ω–æ {who.mention_html()} {msgtxt}")
    else: await Bot('L0NG:B07-70KEN').send_message(update.effective_chat.id, parse_mode="HTML", text=rf"*{who.mention_html()} {msgtxt}")
    

async def getID(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(datetime.now().strftime("%d.%m.%Y %X"), "–¥–∞—é id –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è")
    if update.message.reply_to_message is not None:
        mid = update.message.reply_to_message
        if mid.sender_chat:
            msgtxt = mid.sender_chat.id
        await update.message.reply_html(f'<code>{msgtxt}</code>')
    else: await update.reply_text("you're doing it wrong")


def main():
    application = ApplicationBuilder().token('L0NG:B07-70KEN').build()
    
    –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.start()
    #–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.add_job(neural_horo, 'cron', hour=11, minute=11, timezone='TIMEZONE')
    –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.add_job(good_morning, 'cron', hour=8, minute=21, timezone='TIMEZONE')
    #–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.add_job(good_morning, 'cron', hour=6, minute=44, timezone='TIMEZONE')
    #application.add_handler(CommandHandler('gm', good_morning))
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler("help", help))
    application.add_handler(CommandHandler("temp", pc_temp, filters.Chat([4dm1n])))
    application.add_handler(CommandHandler("ip", pc_ip, filters.Chat([4dm1n])))
    application.add_handler(CommandHandler("uptime", pc_uptime, filters.Chat([4dm1n])))
    application.add_handler(CommandHandler("shutdown", shutdown, filters.Chat([4dm1n])))
    application.add_handler(CommandHandler("wake", wake_rainbow, filters.Chat([4dm1n])))
    application.add_handler(CommandHandler("photo", photo, filters.Chat([4dm1n])))
    application.add_handler(CommandHandler("screen", screen, filters.Chat([4dm1n])))
    application.add_handler(CommandHandler("light", –≤–∫–ª_—ç–∫—Ä–∞–Ω, filters.Chat([4dm1n])))
    application.add_handler(CommandHandler("whosthere", –∫—Ç–æ_–≤_—Å–µ—Ç–∏, filters.Chat([4dm1n])))
    application.add_handler(CommandHandler("fadvice", advice))
    application.add_handler(CommandHandler("vadvice", voice_advice))
    application.add_handler(CommandHandler("coin", coin))
    application.add_handler(CommandHandler("roulette", roulette))
    application.add_handler(CommandHandler("answer", answer))
    application.add_handler(CommandHandler("anek", anek))
    application.add_handler(CommandHandler("voiceanek", voice_anek))
    application.add_handler(CommandHandler("cat", cat))
    application.add_handler(CommandHandler("dog", dog))
    application.add_handler(CommandHandler("duck", duck))
    application.add_handler(CommandHandler("neko", neko))
    #application.add_handler(CommandHandler("b", –±–∞–ª–∞–±–æ–±–∞))
    application.add_handler(CommandHandler("8", —à–∞—Ä_–≤–æ—Å—å–º—ë—Ä–∫–∞))
    application.add_handler(CommandHandler("p", –ø—Ä–∞–∑–¥–Ω–∏–∫–∏))
    application.add_handler(CommandHandler("add", –¥–æ–±–∞–≤–∏—Ç—å_–ø–∞—Ä–æ–ª—å, filters.Chat([4dm1n])))
    application.add_handler(CommandHandler("search", –ø–æ–∫–∞–∑–∞—Ç—å_–±–¥, filters.Chat([4dm1n])))
    #application.add_handler(CommandHandler("c", chatgpt))
    application.add_handler(CommandHandler("getf", getf))
    #application.add_handler(CommandHandler("catboy", catboys))
    application.add_handler(CommandHandler("d20", d20))
    application.add_handler(CommandHandler("d4", d4))
    application.add_handler(CommandHandler("d6", d6))
    application.add_handler(CommandHandler("d8", d8))
    application.add_handler(CommandHandler("d10", d10))
    application.add_handler(CommandHandler("d12", d12))
    application.add_handler(CommandHandler("d100", d100))
    application.add_handler(CommandHandler("d10x2", d10x2))
    application.add_handler(CommandHandler("boobs", boobs))
    application.add_handler(CommandHandler("butt", butt))
    application.add_handler(CommandHandler("otherPC", otherPC, filters.Chat([4dm1n, otheradmin])))
    application.add_handler(CommandHandler("torrent", torrent, filters.Chat([4dm1n])))
    application.add_handler(CommandHandler("donate", donate))
    application.add_handler(CommandHandler("babe", babe))
    application.add_handler(CommandHandler("ban_roulette", ban_roulette))
    application.add_handler(CommandHandler("me", me))
    application.add_handler(CommandHandler("getid", getID))
    application.add_handler(MessageHandler((filters.PHOTO), pics_handler, True))
    application.add_handler(MessageHandler((filters.VIDEO), videos_handler, True))
    application.add_handler(MessageHandler((filters.TEXT & (~filters.COMMAND)), text_recognizer, True))
    application.add_handler(MessageHandler(filters.Dice.ALL, dice_answerer))
    application.add_handler(MessageHandler(filters.Sticker.ALL, stickers_handler))
    application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, novichok))
    application.add_handler(InlineQueryHandler(inline_query))
    application.add_error_handler(error_handler)
    #application.add_error_handler(wtf)
    application.add_handler(CallbackQueryHandler(button, pattern="\D"))
    application.add_handler(CallbackQueryHandler(button_for_roulette, pattern="\d"))
    application.run_polling()

if __name__ == '__main__':
    main()
